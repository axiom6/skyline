// Generated by CoffeeScript 1.12.2
(function() {
  var $, Credit, Pay,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  Credit = require('js/res/Credit');

  Pay = (function() {
    module.exports = Pay;

    function Pay(stream, store, room1, cust, res, home, Data) {
      this.stream = stream;
      this.store = store;
      this.room = room1;
      this.cust = cust;
      this.res = res;
      this.home = home;
      this.Data = Data;
      this.onError = bind(this.onError, this);
      this.onCharge = bind(this.onCharge, this);
      this.onToken = bind(this.onToken, this);
      this.submitPayment = bind(this.submitPayment, this);
      this.onMakePayment = bind(this.onMakePayment, this);
      this.onMakeDeposit = bind(this.onMakeDeposit, this);
      this.onChangeReser = bind(this.onChangeReser, this);
      this.initCCPayment = bind(this.initCCPayment, this);
      this.showConfirmPay = bind(this.showConfirmPay, this);
      this.credit = new Credit('.masked');
      this.uri = "https://api.stripe.com/v1/";
      this.subscribe();
      $.ajaxSetup({
        headers: {
          "Authorization": this.Data.stripeCurlKey
        }
      });
      this.myRes = {};
      this.created = false;
      this.first = '';
      this.last = '';
      this.phone = '';
      this.email = '';
      this.spas = false;
      this.purpose = 'PayInFull';
      this.testing = true;
      this.errored = false;
    }

    Pay.prototype.showSpa = function(myRes) {
      var ref, room, roomId;
      ref = myRes.rooms;
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        room = ref[roomId];
        if (this.room.hasSpa(roomId)) {
          return true;
        }
      }
      return false;
    };

    Pay.prototype.showConfirmPay = function(myRes) {
      this.myRes = myRes;
      this.myRes['cust'] = this.cust.createCust(this.first, this.last, this.phone, this.email, 'site');
      if (this.created) {
        $('#ConfirmTable').remove();
        $('#form-pay').remove();
        $('#ConfirmBlock').append(this.confirmTable());
        $('#PayDiv').append(this.payHtml());
        $('#form-pay').get(0).reset();
        $('#cc-amt').text('$' + this.myRes.total);
        $('#Pays').show();
      } else {
        $('#Pays').append(this.confirmHead());
        $('#ConfirmBlock').append(this.confirmTable());
        $('#Pays').append(this.confirmBtns());
        $('#PayDiv').append(this.payHtml());
        this.initCCPayment();
        $('#Pays').show();
        this.created = true;
      }
    };

    Pay.prototype.initCCPayment = function() {
      $('#cc-amt').text('$' + this.myRes.total);
      $('#ChangeReser').click((function(_this) {
        return function(e) {
          return _this.onChangeReser(e);
        };
      })(this));
      $('#MakeDeposit').click((function(_this) {
        return function(e) {
          return _this.onMakeDeposit(e);
        };
      })(this));
      $('#MakePayment').click((function(_this) {
        return function(e) {
          return _this.onMakePayment(e);
        };
      })(this));
      $('.SpaCheck').change((function(_this) {
        return function(e) {
          return _this.onSpa(e);
        };
      })(this));
      $('#cc-sub').click((function(_this) {
        return function(e) {
          return _this.submitPayment(e);
        };
      })(this));
      return this.credit.ready();
    };

    Pay.prototype.testPop = function() {
      $('#cc-num').val('4242424242424242');
      $('#cc-exp').val('10/19');
      return $('#cc-cvc').val('555');
    };

    Pay.prototype.onChangeReser = function(e) {
      e.preventDefault();
      $('#Make').text('Change Reservation');
      $('#Pays').hide();
      $('#Book').show();
    };

    Pay.prototype.onMakeDeposit = function(e) {
      e.preventDefault();
      this.purpose = 'Deposit';
      $("#cc-amt").text('$' + this.myRes.deposit);
      return $('#MakePay').text('Make 50% Deposit');
    };

    Pay.prototype.onMakePayment = function(e) {
      e.preventDefault();
      this.purpose = 'PayInFull';
      $("#cc-amt").text('$' + this.myRes.total);
      return $('#MakePay').text('Make Payment with Visa Mastercard or Discover');
    };

    Pay.prototype.ccAmt = function() {
      var amt;
      amt = this.purpose === 'Deposit' ? this.myRes.deposit : this.myRes.total;
      $("#cc-amt").text('$' + amt);
    };

    Pay.prototype.confirmHead = function() {
      var htm;
      htm = "<div id=\"ConfirmTitle\" class= \"Title\">Confirmation # " + this.myRes.key + "</div>";
      htm += "<div id=\"ConfirmName\"><span>For: " + this.first + " </span><span>" + this.last + " </span></div>";
      htm += "<div id=\"ConfirmBlock\" class=\"DivCenter\"></div>";
      return htm;
    };

    Pay.prototype.confirmTable = function() {
      var arrive, days, depart, htm, num, r, ref, roomId, spaTH;
      this.spas = this.showSpa(this.myRes);
      spaTH = this.spas ? "Spa" : "";
      htm = "<table id=\"ConfirmTable\"><thead>";
      htm += "<tr><th>Cottage</th><th>Guests</th><th>Pets</th><th>" + spaTH + "</th><th>Price</th><th class=\"arrive\">Arrive</th><th class=\"depart\">Depart</th><th>Nights</th><th>Total</th></tr>";
      htm += "</thead><tbody>";
      ref = this.myRes.rooms;
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        r = ref[roomId];
        days = Object.keys(r.days).sort();
        num = days.length;
        arrive = this.confirmDate(days[0], "", false);
        depart = this.confirmDate(days[num - 1], "", true);
        htm += "<tr><td class=\"td-left\">" + r.name + "</td><td class=\"guests\">" + r.guests + "</td><td class=\"pets\">" + r.pets + "</td><td>" + (this.spa(roomId)) + "</td><td class=\"room-price\">$" + r.price + "</td><td>" + arrive + "</td><td>" + depart + "</td><td class=\"nights\">" + num + "</td><td id=\"" + roomId + "TR\" class=\"room-total\">$" + r.total + "</td></tr>";
      }
      htm += "<tr><td></td><td></td><td></td><td></td><td></td><td class=\"arrive-times\">Arrival is from 3:00-8:00PM</td><td class=\"depart-times\">Checkout is before 10:00AM</td><td></td><td  id=\"TT\" class=\"room-total\">$" + this.myRes.total + "</td></tr>";
      htm += "</tbody></table>";
      return htm;
    };

    Pay.prototype.confirmBtns = function() {
      var canDeposit, htm;
      canDeposit = this.canMakeDeposit(this.myRes);
      htm = "<div class=\"PayBtns\">";
      htm += "  <button class=\"btn btn-primary\" id=\"ChangeReser\">Change Reservation</button>";
      if (canDeposit) {
        htm += "  <button class=\"btn btn-primary\" id=\"MakeDeposit\">Make 50% Deposit</button>";
      }
      if (canDeposit) {
        htm += "  <button class=\"btn btn-primary\" id=\"MakePayment\">Make Payment</button>";
      }
      htm += "</div>";
      htm += "<div id=\"MakePay\" class=\"Title\">Make Payment</div>";
      htm += "<div id=\"PayDiv\"></div>";
      htm += "<div id=\"Approval\"></div>";
      return htm;
    };

    Pay.prototype.canMakeDeposit = function(myRes) {
      return this.myRes.arrive >= this.Data.advanceDate(this.myRes.booked, 7);
    };

    Pay.prototype.spa = function(roomId) {
      if (this.room.hasSpa(roomId)) {
        return "<input id=\"" + roomId + "SpaCheck\" class=\"SpaCheck\" type=\"checkbox\" value=\"" + roomId + "\" checked>";
      } else {
        return "";
      }
    };

    Pay.prototype.onSpa = function(event) {
      var $elem, checked, roomId, spaFee;
      $elem = $(event.target);
      roomId = $elem.attr('id').charAt(0);
      checked = $elem.is(':checked');
      spaFee = checked ? 20 : -20;
      this.myRes.rooms[roomId].total += spaFee;
      this.myRes.total += spaFee;
      this.myRes.deposit += spaFee / 2;
      $('#' + roomId + 'TR').text('$' + this.myRes.rooms[roomId].total);
      $('#TT').text('$' + this.myRes.total);
      this.ccAmt();
    };

    Pay.prototype.confirmBody = function() {
      var arrive, body, days, depart, num, r, ref, room, roomId;
      body = ".      Confirmation# " + this.myRes.key + "\n";
      body += ".      For: " + this.first + " " + this.last + "\n";
      ref = this.myRes.rooms;
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        r = ref[roomId];
        room = Util.padEnd(r.name, 24, '-');
        days = Object.keys(r.days).sort();
        num = days.length;
        arrive = this.confirmDate(days[0], "", false);
        depart = this.confirmDate(days[num - 1], "", true);
        body += room + " $" + r.price + "  " + r.guests + "-Guests " + r.pets + "-Pets Arrive:" + arrive + " Depart:" + depart + " " + num + "-Nights $" + r.total + "\n";
      }
      body += "\n.      Arrival is from 3:00-8:00PM   Checkout is before 10:00AM\n";
      body = escape(body);
      return body;
    };

    Pay.prototype.confirmEmail = function() {
      var win;
      win = window.open("mailto:" + this.email + "?subject=Skyline Cottages Confirmation&body=" + (this.confirmBody()), "EMail");
      if ((win != null) && !win.closed) {
        win.close();
      }
    };

    Pay.prototype.departDate = function(monthI, dayI, weekdayI) {
      var dayO, monthO, weekdayO;
      dayO = dayI + 1;
      monthO = monthI;
      weekdayO = (weekdayI + 1) % 7;
      if (dayI >= this.Data.numDayMonth[monthI]) {
        dayO = 1;
        monthO = monthI + 1;
      }
      return [monthO, dayO, weekdayO];
    };

    Pay.prototype.confirmDate = function(dayStr, msg, isDepart) {
      var day, monthIdx, ref, weekdayIdx, year;
      year = parseInt(dayStr.substr(0, 4));
      monthIdx = parseInt(dayStr.substr(4, 2)) - 1;
      day = parseInt(dayStr.substr(6, 2));
      weekdayIdx = new Date(year, monthIdx, day).getDay();
      if (isDepart) {
        ref = this.departDate(monthIdx, day, weekdayIdx), monthIdx = ref[0], day = ref[1], weekdayIdx = ref[2];
      }
      return this.Data.weekdays[weekdayIdx] + " " + this.Data.months[monthIdx] + " " + day + ", " + year + "  " + msg;
    };

    Pay.prototype.payHtml = function() {
      var cvcPtn, expPtn, numPtn;
      numPtn = "\d{4} \d{4} \d{4} \d{4}";
      expPtn = "(1[0-2]|0[1-9])\/\d\d";
      cvcPtn = "\d{3}";
      return "<div id=\"form-pay\">\n  <span class=\"form-group\">\n    <label for=\"cc-num\" class=\"control-label\">Card Number<span class=\"text-muted\">  [<span class=\"cc-com\">/span>]</span></label>\n    <input id= \"cc-num\" type=\"tel\" class=\"input-lg form-control cc-num masked\" placeholder=\"•••• •••• •••• ••••\" pattern=\"" + numPtn + "\" required>\n    <div   id= \"er-num\" class=\"cc-msg\"></div>\n  </span>\n\n  <span class=\"form-group\">\n    <label for=\"cc-exp\" class=\"control-label\">Expiration</label>\n    <input id= \"cc-exp\" type=\"tel\" class=\"input-lg form-control cc-exp masked\" placeholder=\"MM/YY\" pattern=\"" + expPtn + "\" required>\n    <div   id= \"er-exp\" class=\"cc-msg\"></div>\n  </span>\n\n  <span class=\"form-group\">\n    <label for=\"cc-cvc\" class=\"control-label\">CVC</label>\n    <input id= \"cc-cvc\" type=\"tel\" class=\"input-lg form-control cc-cvc masked\" placeholder=\"•••\" pattern=\"" + cvcPtn + "\"  required>\n    <div   id= \"er-cvc\" class=\"cc-msg\"></div>\n  </span>\n\n  <span class=\"form-group\">\n    <label for=\"cc-amt\"   class=\"control-label\">Amount</label>\n    <div   id= \"cc-amt\" class=\"input-lg form-control cc-amt\"></div>\n    <div   id= \"er-amt\" class=\"cc-msg\"></div>\n  </span>\n\n  <span class=\"form-group\">\n    <label  for=\"cc-sub\" class=\"control-label\">&nbsp;</label>\n    <button id= \"cc-sub\" class=\"btn btn-lg btn-primary\">Pay</button>\n    <div    id= \"er-sub\" class=\"cc-msg\"></div>\n  </span>\n</div>";
    };

    Pay.prototype.submitPayment = function(e) {
      var cardType, ce, cvc, ee, exp, mon, ne, num, ref, ref1, ref2, yer;
      e.preventDefault();
      $('#er-num').hide();
      $('#er-exp').hide();
      $('#er-cvc').hide();
      $('#er-sub').hide();
      cardType = this.credit.cardFromType(num);
      ref = this.isValid('cc-num', '4242 4242 4242 4242', this.testing), num = ref[0], ne = ref[1];
      ref1 = this.isValid('cc-exp', '10 / 19', this.testing), exp = ref1[0], ee = ref1[1];
      ref2 = this.isValid('cc-cvc', '555', this.testing), cvc = ref2[0], ce = ref2[1];
      mon = exp.substr(0, 2);
      yer = '20' + exp.substr(5, 2);
      $('.cc-com').text(cardType);
      if (ne && ee && ce) {
        $('#MakePay').hide();
        $('#PayDiv').hide();
        $('.PayBtns').hide();
        $('#Approval').text("Waiting For Approval...").show();
        this.token(num, mon, yer, cvc);
        this.last4 = num.substr(11, 4);
      } else {
        $('#er-num').show();
        $('#er-exp').show();
        $('#er-cvc').show();
        $('#er-sub').show();
      }
    };

    Pay.prototype.isValid = function(name, test, testing) {
      var valid, value;
      if (testing == null) {
        testing = false;
      }
      value = $('#' + name).val();
      valid = Util.isStr(value);
      if (testing) {
        $('#' + name).val(test);
        value = test;
        valid = true;
      }
      return [value, valid];
    };

    Pay.prototype.cardAccept = function(cardType) {
      return cardType === 'Visa' || cardType === 'Mastercard' || cardType === 'Discover';
    };

    Pay.prototype.subscribe = function() {
      this.stream.subscribe('tokens', this.onToken, this.onError);
      return this.stream.subscribe('charges', this.onCharge, this.onError);
    };

    Pay.prototype.token = function(number, exp_month, exp_year, cvc) {
      var input;
      input = {
        "card[number]": number,
        "card[exp_month]": exp_month,
        "card[exp_year]": exp_year,
        "card[cvc]": cvc
      };
      this.ajaxRest("tokens", 'post', input);
    };

    Pay.prototype.charge = function(token, amount, currency, description) {
      var input;
      input = {
        source: token,
        amount: amount,
        currency: currency,
        description: description
      };
      this.ajaxRest("charges", 'post', input);
    };

    Pay.prototype.onToken = function(obj) {
      Util.log('StoreRest.onToken()', obj);
      this.tokenId = obj.id;
      this.cardId = obj.card.id;
      return this.charge(this.tokenId, this.myRes.total, 'usd', this.first + " " + this.last);
    };

    Pay.prototype.onCharge = function(obj) {
      Util.log('StoreRest.onCharge()', obj);
      if (obj['outcome'].type === 'authorized') {
        this.confirmEmail();
        $('.PayBtns').hide();
        $('#MakePay').hide();
        $('#PayDiv').hide();
        $('#Approval').text("Approved: A Confirnation Email Been Sent To " + this.email);
        this.home.showConfirm();
        this.myRes.payments[this.payId()] = this.createPayment();
        return this.store.put('Res', this.myRes.key, this.myRes);
      } else {
        return $('#Approval').text('Denied').show();
      }
    };

    Pay.prototype.payId = function() {
      var pays;
      pays = Object.keys(this.myRes.payments).sort();
      if (pays.length > 0) {
        return toString(parseInt(pays[pays.length - 1]) + 1);
      } else {
        return '1';
      }
    };

    Pay.prototype.createPayment = function() {
      var payment;
      payment = {};
      payment.amount = this.myRes.total;
      payment.date = this.Data.today();
      payment.method = 'card';
      payment["with"] = this.last4;
      payment.purpose = this.purpose;
      return payment;
    };

    Pay.prototype.onError = function(obj) {
      return Util.error('StoreRest.onError()', obj);
    };

    Pay.prototype.ajaxRest = function(table, op, input) {
      var settings, url;
      url = this.uri + table;
      settings = {
        url: url,
        type: op
      };
      settings.headers = {
        Authorization: 'Bearer ' + this.Data.stripeTestKey
      };
      settings.data = input;
      settings.success = (function(_this) {
        return function(result, status, jqXHR) {
          _this.stream.publish(table, result);
          return Util.noop(jqXHR, status);
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, status, error) {
          Util.error('StoreRest.ajaxRest()', {
            status: status,
            error: error
          });
          return Util.noop(jqXHR);
        };
      })(this);
      $.ajax(settings);
    };

    Pay.prototype.toQuery = function(input) {
      var key, query, val;
      query = "";
      if (input == null) {
        return query;
      }
      for (key in input) {
        if (!hasProp.call(input, key)) continue;
        val = input[key];
        query += "@" + key + "=" + val;
      }
      return query[0] = '?';
    };

    Pay.prototype.toJSON = function(obj) {
      if (obj != null) {
        return JSON.stringify(obj);
      } else {
        return '';
      }
    };

    Pay.prototype.toObject = function(json) {
      if (json) {
        return JSON.parse(json);
      } else {
        return {};
      }
    };

    return Pay;

  })();

}).call(this);
