// Generated by CoffeeScript 1.12.2
(function() {
  var Room,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Room = (function() {
    module.exports = Room;

    Room.Rooms = require('data/Room.json');

    Room.States = ["book", "depo", "hold", "free"];

    function Room(stream, store) {
      this.stream = stream;
      this.store = store;
      this.onAlloc = bind(this.onAlloc, this);
      this.rooms = Room.Rooms;
      this.states = Room.States;
      this.roomUIs = this.createRoomUIs(this.rooms);
    }

    Room.prototype.createRoomUIs = function(data) {
      var key, room, roomUIs;
      roomUIs = {};
      for (key in data) {
        room = data[key];
        roomUIs[key] = {};
      }
      return roomUIs;
    };

    Room.prototype.createCell = function(room, date) {
      var status;
      status = this.dayBooked(room, date);
      return "<td id=\"" + (room.roomId + date) + "\" class=\"room-" + status + "\" data-status=\"" + status + "\"></td>";
    };

    Room.prototype.dayBooked = function(room, date) {
      var day, i, j, len, len1, ref, ref1, status;
      ref = this.states;
      for (i = 0, len = ref.length; i < len; i++) {
        status = ref[i];
        if (room[status] != null) {
          ref1 = room[status];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            day = ref1[j];
            if (day === date) {
              return status;
            }
          }
        }
      }
      return 'free';
    };

    Room.prototype.onAlloc = function(alloc) {
      var day, i, j, len, len1, ref, ref1, status;
      Util.log('Room.onAlloc()');
      ref = this.states;
      for (i = 0, len = ref.length; i < len; i++) {
        status = ref[i];
        if (alloc[status] != null) {
          ref1 = alloc[status];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            day = ref1[j];
            this.allocRoom(alloc, day, status);
          }
        }
      }
    };

    Room.prototype.allocRoom = function(alloc, day, status) {
      var room, roomDays;
      room = this.rooms[alloc.roomId];
      room[status] = room[status] != null ? room[status] : [];
      roomDays = room[status];
      if (!Util.inArray(roomDays, day)) {
        return roomDays.push(day);
      }
    };

    return Room;

  })();

}).call(this);
