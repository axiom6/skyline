// Generated by CoffeeScript 1.12.2
(function() {
  var $, Book,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('jquery');

  Book = (function() {
    module.exports = Book;

    Book.Room = require('data/Room.json');

    Book.Book = require('data/Book.json');

    Book.Alloc = require('data/Alloc.json');

    Book.StatusLookup = {
      "f": "free",
      "h": "hold",
      "b": "book"
    };

    function Book(stream, store, room1, cust) {
      this.stream = stream;
      this.store = store;
      this.room = room1;
      this.cust = cust;
      this.onAlloc = bind(this.onAlloc, this);
      this.onTest = bind(this.onTest, this);
      this.onPets = bind(this.onPets, this);
      this.onDay = bind(this.onDay, this);
      this.onMonth = bind(this.onMonth, this);
      this.onGuests = bind(this.onGuests, this);
      this.numDayMonth = [31, 30, 31, 31, 30, 31];
      this.allDayMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      this.months = ["May", "June", "July", "August", "September", "October"];
      this.monthsAll = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      this.weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      this.days = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"];
      this.persons = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
      this.pets = ["0", "1", "2", "3"];
      this.guests = "2";
      this.pet = 0;
      this.petPrice = 12;
      this.today = new Date();
      this.monthIdx = this.today.getMonth();
      this.monthIdx = 4 < this.monthIdx && this.monthIdx < 10 ? this.monthIdx : 0;
      this.year = "2017";
      this.month = this.months[this.monthIdx];
      this.begDay = 1;
      this.weekdayIdx = new Date(2017, this.monthIdx, 1).getDay();
      this.numDays = 14;
      Util.log('Book Constructor');
    }

    Book.prototype.ready = function() {
      var id, ref, room;
      $('#Inits').append(this.initsHtml());
      $('#Rooms').append(this.roomsHtml());
      $('#Guests').change(this.onGuests);
      $('#Months').change(this.onMonth);
      $('#Days').change(this.onDay);
      $('#Pets').change(this.onPets);
      $('#Months').val(this.month);
      $('#Days').val(this.day);
      $('#Test').click(this.onTest);
      ref = Book.Room;
      for (id in ref) {
        room = ref[id];
        room.$ = $('#' + id);
      }
      return this.subscribe();
    };

    Book.prototype.subscribe = function() {
      this.stream.subscribe('Alloc', (function(_this) {
        return function(alloc) {
          return _this.onAlloc(alloc);
        };
      })(this));
    };

    Book.prototype.initsHtml = function() {
      var htm;
      htm = "<label class=\"init-font\">  Guests:" + (this.htmlSelect(this.persons, "Guests")) + "</label>";
      htm += "<label class=\"init-font\">  Pets:" + (this.htmlSelect(this.pets, "Pets")) + "</label>";
      htm += "<label class=\"init-font\">Arrive:" + (this.htmlSelect(this.months, "Months") + this.htmlSelect(this.days, "Days") + this.year) + "</label>";
      htm += "<span  class=\"init-test\" id=\"Test\">Test</span>";
      return htm;
    };

    Book.prototype.roomsHtml = function() {
      var date, day, htm, i, id, j, k, ref, ref1, ref2, ref3, room, weekday;
      htm = "<table><thead>";
      htm += "<tr><th></th><th id=\"NumGuests\">" + this.guests + "</th>";
      for (day = i = 1, ref = this.numDays; 1 <= ref ? i <= ref : i >= ref; day = 1 <= ref ? ++i : --i) {
        weekday = this.weekdays[(this.weekdayIdx + day - 1) % 7];
        htm += "<th>" + weekday + "</th>";
      }
      htm += "<th></th></tr><tr><th>Cottage</th><th>Guests</th>";
      for (day = j = 1, ref1 = this.numDays; 1 <= ref1 ? j <= ref1 : j >= ref1; day = 1 <= ref1 ? ++j : --j) {
        htm += "<th>" + (this.dayMonth(day)) + "</th>";
      }
      htm += "<th></th></tr></thead><tbody>";
      ref2 = Book.Room;
      for (id in ref2) {
        room = ref2[id];
        room.id = id;
        htm += "<tr id=\"" + id + "\"><td>" + room.name + "</td><td id=\"P" + id + "\" class=\"room-price\">" + ('$' + room[this.guests]) + "</td>";
        for (day = k = 1, ref3 = this.numDays; 1 <= ref3 ? k <= ref3 : k >= ref3; day = 1 <= ref3 ? ++k : --k) {
          date = this.year + Util.pad(this.monthIdx + 5) + Util.pad(this.dayMonth(day));
          htm += this.createCell(room, Book.Book[id], date);
        }
        htm += "<td class=\"btn-book\">Book</td></tr>";
      }
      htm += "</tbody></table>";
      return htm;
    };

    Book.prototype.createCell = function(room, book, date) {
      var status;
      status = this.dayBooked(book, date);
      switch (status) {
        case 'free':
          return "<td id=\"" + (room.id + date) + "\" class=\"room-free\"></td>";
        case 'hold':
          return "<td id=\"" + (room.id + date) + "\" class=\"room-hold\"></td>";
        case 'book':
          return "<td id=\"" + (room.id + date) + "\" class=\"room-book\"></td>";
        default:
          return "<td id=\"" + (room.id + date) + "\" class=\"room-free\"></td>";
      }
    };

    Book.prototype.allocCell = function(room, book, date) {
      var status;
      status = this.dayBooked(book, date);
      return $('#' + room.id + date).removeClass().addClass("room-" + status);
    };

    Book.prototype.updatePrice = function(room, book, date) {
      var price;
      if (this.guests > room.max) {
        room.$.hide();
      } else {
        room.$.show();
        if (!this.dayBooked(book, date)) {
          price = room[this.guests] + this.pet * this.petPrice;
          $('#P' + room.id).text("" + ('$' + price));
        }
      }
    };

    Book.prototype.updatePrices = function() {
      var date, day, id, ref, results, room;
      ref = Book.Room;
      results = [];
      for (id in ref) {
        room = ref[id];
        results.push((function() {
          var i, ref1, results1;
          results1 = [];
          for (day = i = 1, ref1 = this.numDays; 1 <= ref1 ? i <= ref1 : i >= ref1; day = 1 <= ref1 ? ++i : --i) {
            date = this.year + Util.pad() + Util.pad(this.dayMonth(day));
            results1.push(this.updatePrice(room, Book.Book[id], date));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Book.prototype.toDay = function(date) {
      if (date.charAt(6) === '0') {
        return date.substr(7, 8);
      } else {
        return date.substr(6, 8);
      }
    };

    Book.prototype.dayBooked = function(book, day) {
      var bday, bdays, i, key, len, lookup;
      for (key in book) {
        bdays = book[key];
        for (i = 0, len = bdays.length; i < len; i++) {
          bday = bdays[i];
          if (!(bday.substr(0, 8) === day)) {
            continue;
          }
          lookup = Book.StatusLookup[bday.substr(8, 1)];
          if (lookup != null) {
            return lookup;
          } else {
            return 'free';
          }
        }
      }
      return 'free';
    };

    Book.prototype.htmlSelect = function(array, prop) {
      var elem, htm, i, len;
      htm = "<select id=\"" + prop + "\">";
      for (i = 0, len = array.length; i < len; i++) {
        elem = array[i];
        htm += "<option>" + elem + "</option>";
      }
      return htm += "</select>";
    };

    Book.prototype.onGuests = function(event) {
      this.guests = event.target.value;
      $('#NumGuests').text(this.guests);
      this.updatePrices();
    };

    Book.prototype.onMonth = function(event) {
      this.month = event.target.value;
      this.monthIdx = this.months.indexOf(this.month);
      this.weekdayIdx = new Date(2017, this.monthIdx, 1).getDay();
      $('#Rooms').empty();
      $('#Rooms').append(this.roomsHtml());
    };

    Book.prototype.onDay = function(event) {
      this.begDay = parseInt(event.target.value);
      $('#Rooms').empty();
      $('#Rooms').append(this.roomsHtml());
    };

    Book.prototype.onPets = function(event) {
      this.pet = event.target.value;
      this.updatePrices();
    };

    Book.prototype.onTest = function() {
      Util.log("OnTest");
      return this.stream.publish("Alloc", Book.Alloc);
    };

    Book.prototype.onAlloc = function(alloc) {
      var date, day, i, id, ref, ref1, room;
      Util.log("onAlloc", alloc);
      ref = Book.Room;
      for (id in ref) {
        room = ref[id];
        room.id = id;
        for (day = i = 1, ref1 = this.numDays; 1 <= ref1 ? i <= ref1 : i >= ref1; day = 1 <= ref1 ? ++i : --i) {
          date = this.year + Util.pad(this.monthIdx + 5) + Util.pad(this.dayMonth(day));
          this.allocCell(room, alloc, date);
        }
      }
    };

    Book.prototype.dayMonth = function(iday) {
      var day;
      day = this.begDay + iday - 1;
      if (day > this.numDayMonth[this.monthIdx]) {
        return day - this.numDayMonth[this.monthIdx];
      } else {
        return day;
      }
    };

    return Book;

  })();

}).call(this);
