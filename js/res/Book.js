// Generated by CoffeeScript 1.12.2
(function() {
  var $, Book,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  Book = (function() {
    module.exports = Book;

    Book.Allocs = require('data/Alloc.json');

    Book.States = ["book", "depo", "hold", "free"];

    function Book(stream, store, room1, cust) {
      this.stream = stream;
      this.store = store;
      this.room = room1;
      this.cust = cust;
      this.insert = bind(this.insert, this);
      this.make = bind(this.make, this);
      this.onAlloc = bind(this.onAlloc, this);
      this.onCellBook = bind(this.onCellBook, this);
      this.onTest = bind(this.onTest, this);
      this.initRooms = bind(this.initRooms, this);
      this.onPets = bind(this.onPets, this);
      this.onDay = bind(this.onDay, this);
      this.onMonth = bind(this.onMonth, this);
      this.onGuests = bind(this.onGuests, this);
      this.subscribe();
      this.rooms = this.room.rooms;
      this.roomUIs = this.room.roomUIs;
      this.initRooms();
      this.numDayMonth = [31, 30, 31, 31, 30, 31];
      this.allDayMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      this.months = ["May", "June", "July", "August", "September", "October"];
      this.monthsAll = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      this.weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      this.days = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"];
      this.persons = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
      this.pets = ["0", "1", "2", "3"];
      this.guests = "2";
      this.pet = 0;
      this.myDays = 0;
      this.petPrice = 12;
      this.today = new Date();
      this.monthIdx = this.today.getMonth();
      this.monthIdx = 2;
      this.year = "2017";
      this.month = this.months[this.monthIdx];
      this.begDay = 9;
      this.weekdayIdx = new Date(2017, this.monthIdx, 1).getDay();
      this.numDays = 14;
      this.$cells = [];
      this.myCustId = "12";
      Util.log('Book Constructor');
    }

    Book.prototype.ready = function() {
      $('#Inits').append(this.initsHtml());
      $('#Rooms').append(this.roomsHtml());
      $('#Guests').change(this.onGuests);
      $('#Pets').change(this.onPets);
      $('#Months').change(this.onMonth);
      $('#Days').change(this.onDay);
      $('#Test').click(this.onTest);
      this.initAlloc();
      return this.roomsJQuery();
    };

    Book.prototype.subscribe = function() {
      this.stream.subscribe('Alloc', (function(_this) {
        return function(alloc) {
          return _this.onAlloc(alloc);
        };
      })(this));
    };

    Book.prototype.initsHtml = function() {
      var htm;
      htm = "<label class=\"init-font\">&nbsp;&nbsp;Guests:" + (this.htmlSelect("Guests", this.persons, this.guests)) + "</label>";
      htm += "<label class=\"init-font\">&nbsp;&nbsp;Pets:  " + (this.htmlSelect("Pets", this.pets, this.pet)) + "</label>";
      htm += "<label class=\"init-font\">&nbsp;&nbsp;Arrive:" + (this.htmlSelect("Months", this.months, this.month)) + "</label>";
      htm += "<label class=\"init-font\">&nbsp;&nbsp;       " + (this.htmlSelect("Days", this.days, this.begDay)) + "</label>";
      htm += "<label class=\"init-font\">&nbsp;&nbsp;" + this.year + "</label>";
      htm += "<span  class=\"init-font\" id=\"Test\">&nbsp;&nbsp;Test</span>";
      return htm;
    };

    Book.prototype.roomsHtml = function() {
      var date, day, htm, i, j, k, l, ref, ref1, ref2, ref3, ref4, room, roomId, weekday;
      htm = "<table><thead>";
      htm += "<tr><th></th><th id=\"NumGuests\">" + this.guests + "&nbsp;Guests</th>";
      for (day = i = 1, ref = this.numDays; 1 <= ref ? i <= ref : i >= ref; day = 1 <= ref ? ++i : --i) {
        weekday = this.weekdays[(this.weekdayIdx + day - 1) % 7];
        htm += "<th>" + weekday + "</th>";
      }
      htm += "<th>Room</th></tr><tr><th>Cottage</th><th>" + this.pet + "&nbsp;Pets</th>";
      for (day = j = 1, ref1 = this.numDays; 1 <= ref1 ? j <= ref1 : j >= ref1; day = 1 <= ref1 ? ++j : --j) {
        htm += "<th>" + (this.dayMonth(day)) + "</th>";
      }
      htm += "<th>Total</th></tr></thead><tbody>";
      ref2 = this.rooms;
      for (roomId in ref2) {
        if (!hasProp.call(ref2, roomId)) continue;
        room = ref2[roomId];
        htm += "<tr id=\"" + roomId + "\"><td>" + room.name + "</td><td id=\"" + roomId + "Price\" class=\"room-price\">" + ('$' + this.calcPrice(room)) + "</td>";
        for (day = k = 1, ref3 = this.numDays; 1 <= ref3 ? k <= ref3 : k >= ref3; day = 1 <= ref3 ? ++k : --k) {
          date = this.toDateStr(day);
          htm += this.createCell(room, date);
        }
        htm += "<td class=\"room-total\" id=\"" + roomId + "Total\"></td></tr>";
      }
      htm += "<tr><td></td><td></td>";
      for (day = l = 1, ref4 = this.numDays; 1 <= ref4 ? l <= ref4 : l >= ref4; day = 1 <= ref4 ? ++l : --l) {
        htm += "<td></td>";
      }
      htm += "<td class=\"room-total\" id=\"Totals\">&nbsp;</td></tr>";
      htm += "</tbody></table>";
      return htm;
    };

    Book.prototype.roomsJQuery = function() {
      var $cell, date, day, i, j, len, ref, ref1, ref2, roomId, roomUI;
      ref = this.$cells;
      for (i = 0, len = ref.length; i < len; i++) {
        $cell = ref[i];
        $cell.unbind("click");
      }
      this.$cells = [];
      ref1 = this.roomUIs;
      for (roomId in ref1) {
        roomUI = ref1[roomId];
        roomUI.$ = $('#' + roomId);
        for (day = j = 1, ref2 = this.numDays; 1 <= ref2 ? j <= ref2 : j >= ref2; day = 1 <= ref2 ? ++j : --j) {
          date = this.toDateStr(day);
          $cell = $('#' + roomId + date);
          $cell.click((function(_this) {
            return function(event) {
              return _this.onCellBook(event);
            };
          })(this));
          this.$cells.push($cell);
        }
      }
    };

    Book.prototype.createCell = function(room, date) {
      var status;
      status = this.dayBooked(room, date);
      return "<td id=\"" + (room.roomId + date) + "\" class=\"room-" + status + "\" data-status=\"" + status + "\"></td>";
    };

    Book.prototype.calcPrice = function(room) {
      var price;
      price = room[this.guests] + this.pet * this.petPrice;
      room.price = price;
      return price;
    };

    Book.prototype.updatePrice = function(room) {
      var roomId;
      roomId = room.roomId;
      if (this.guests > room.max) {
        this.roomUIs[roomId].$.hide();
      } else {
        this.roomUIs[roomId].$.show();
        $('#P' + roomId).text("" + ('$' + this.calcPrice(room)));
      }
    };

    Book.prototype.updatePrices = function() {
      var ref, results, room, roomId;
      ref = this.rooms;
      results = [];
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        room = ref[roomId];
        results.push(this.updatePrice(room));
      }
      return results;
    };

    Book.prototype.updateTotal = function(room, date, status) {
      var price, text;
      price = room.price;
      room.total += status === 'mine' ? price : -price;
      text = room.total === 0 ? '' : '$' + room.total;
      $('#' + room.roomId + 'Total').text(text);
      this.updateTotals();
    };

    Book.prototype.newCust = function() {
      return {
        status: 'mine',
        days: [],
        total: 0
      };
    };

    Book.prototype.updateTotals = function() {
      var ref, room, roomId, text, totals;
      totals = 0;
      ref = this.rooms;
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        room = ref[roomId];
        totals += room.total;
      }
      text = totals === 0 ? '' : '$' + totals;
      $('#Totals').text(text);
    };

    Book.prototype.toDay = function(date) {
      if (date.charAt(6) === '0') {
        return date.substr(7, 8);
      } else {
        return date.substr(6, 8);
      }
    };

    Book.prototype.dayBooked = function(room, date) {
      var day, i, j, len, len1, ref, ref1, status;
      ref = Book.States;
      for (i = 0, len = ref.length; i < len; i++) {
        status = ref[i];
        if (room[status] != null) {
          ref1 = room[status];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            day = ref1[j];
            if (day === date) {
              return status;
            }
          }
        }
      }
      return 'free';
    };

    Book.prototype.htmlSelect = function(htmlId, array, choice) {
      var elem, htm, i, len, selected;
      htm = "<select id=\"" + htmlId + "\">";
      for (i = 0, len = array.length; i < len; i++) {
        elem = array[i];
        selected = elem === Util.toStr(choice) ? "selected" : "";
        htm += "<option" + (' ' + selected) + ">" + elem + "</option>";
      }
      return htm += "</select>";
    };

    Book.prototype.onGuests = function(event) {
      this.guests = event.target.value;
      $('#NumGuests').text(this.guests);
      this.updatePrices();
    };

    Book.prototype.onMonth = function(event) {
      this.month = event.target.value;
      this.monthIdx = this.months.indexOf(this.month);
      this.weekdayIdx = new Date(2017, this.monthIdx, 1).getDay();
      this.resetRooms();
    };

    Book.prototype.onDay = function(event) {
      this.begDay = parseInt(event.target.value);
      this.resetRooms();
    };

    Book.prototype.resetRooms = function() {
      $('#Rooms').empty();
      $('#Rooms').append(this.roomsHtml());
      return this.roomsJQuery();
    };

    Book.prototype.onPets = function(event) {
      this.pet = event.target.value;
      this.updatePrices();
    };

    Book.prototype.initRooms = function() {
      this.store.subscribe('Room', 'none', 'make', (function(_this) {
        return function(make) {
          return _this.store.insert('Room', _this.rooms);
        };
      })(this));
      return this.store.make('Room');
    };

    Book.prototype.initAlloc = function() {
      this.store.subscribe('Alloc', 'none', 'onAdd', (function(_this) {
        return function(onAdd) {
          Util.log('Alloc.onAdd()', onAdd);
          return _this.onAlloc(onAdd);
        };
      })(this));
      this.store.subscribe('Alloc', 'none', 'onPut', (function(_this) {
        return function(onPut) {
          return Util.log('Alloc.onPut()', onPut);
        };
      })(this));
      this.store.subscribe('Alloc', 'none', 'onDel', (function(_this) {
        return function(onDel) {
          return Util.log('Alloc.onDel()', onDel);
        };
      })(this));
      this.store.make('Alloc');
      this.store.on('Alloc', 'onAdd');
      this.store.on('Alloc', 'onPut');
      return this.store.on('Alloc', 'onDel');
    };

    Book.prototype.onTest = function() {
      Util.log('Book.onTest()');
      return this.store.insert('Alloc', Book.Allocs);
    };

    Book.prototype.onCellBook = function(event) {
      var $cell, date, roomId, status;
      $cell = $(event.target);
      status = $cell.attr('data-status');
      if (status === 'free') {
        status = 'mine';
      } else if (status === 'mine') {
        status = 'free';
      }
      this.cellStatus($cell, status);
      roomId = $cell.attr('id').substr(0, 1);
      date = $cell.attr('id').substr(1, 8);
      return this.updateTotal(roomId, date, status);
    };

    Book.prototype.onAlloc = function(onAdd) {
      var alloc, day, i, j, len, len1, ref, ref1, status;
      Util.log('Book.onAlloc()', {
        onEvt: onAdd.onEvt,
        table: onAdd.table,
        key: onAdd.key,
        val: onAdd.val
      });
      alloc = onAdd.val;
      ref = Book.States;
      for (i = 0, len = ref.length; i < len; i++) {
        status = ref[i];
        if (alloc[status] != null) {
          ref1 = alloc[status];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            day = ref1[j];
            this.allocRoom(alloc, day, status);
            this.allocCell(alloc, day, status);
          }
        }
      }
    };

    Book.prototype.allocRoom = function(alloc, day, status) {
      var room, roomDays;
      room = this.rooms[alloc.roomId];
      room[status] = room[status] != null ? room[status] : [];
      roomDays = room[status];
      if (!Util.inArray(roomDays, day)) {
        return roomDays.push(day);
      }
    };

    Book.prototype.allocCell = function(alloc, day, status) {
      return this.cellStatus($('#' + alloc.roomId + day), status);
    };

    Book.prototype.cellStatus = function($cell, status) {
      return $cell.removeClass().addClass("room-" + status).attr('data-status', status);
    };

    Book.prototype.dayMonth = function(iday) {
      var day;
      day = this.begDay + iday - 1;
      if (day > this.numDayMonth[this.monthIdx]) {
        return day - this.numDayMonth[this.monthIdx];
      } else {
        return day;
      }
    };

    Book.prototype.toDateStr = function(day) {
      return this.year + Util.pad(this.monthIdx + 5) + Util.pad(this.dayMonth(day));
    };

    Book.prototype.make = function() {
      return this.store.make('Room');
    };

    Book.prototype.insert = function() {
      return this.store.insert('Room', this.rooms);
    };

    return Book;

  })();

}).call(this);
