// Generated by CoffeeScript 1.12.2
(function() {
  var $, Alloc, Book,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  Alloc = require('js/res/Alloc');

  Book = (function() {
    var testing;

    module.exports = Book;

    function Book(stream, store, room1, res1, pay, pict, Data) {
      this.stream = stream;
      this.store = store;
      this.room = room1;
      this.res = res1;
      this.pay = pay;
      this.pict = pict;
      this.Data = Data;
      this.insert = bind(this.insert, this);
      this.make = bind(this.make, this);
      this.onAlloc = bind(this.onAlloc, this);
      this.onCellBook = bind(this.onCellBook, this);
      this.createRoomRes = bind(this.createRoomRes, this);
      this.onErr = bind(this.onErr, this);
      this.onPop = bind(this.onPop, this);
      this.onDay = bind(this.onDay, this);
      this.onMonth = bind(this.onMonth, this);
      this.onPets = bind(this.onPets, this);
      this.onGuests = bind(this.onGuests, this);
      this.updatePrice = bind(this.updatePrice, this);
      this.calcPrice = bind(this.calcPrice, this);
      this.onGoToPay = bind(this.onGoToPay, this);
      this.rooms = this.room.rooms;
      this.roomUIs = this.room.roomUIs;
      this.myDays = 0;
      this.today = new Date();
      this.monthIdx = this.today.getMonth();
      this.monthIdx = 4 <= this.monthIdx && this.monthIdx <= 9 ? this.monthIdx : 4;
      this.year = 2017;
      this.month = this.Data.months[this.monthIdx];
      this.numDays = 15;
      this.begMay = 15;
      this.begDay = this.month === 'May' ? this.begMay : 1;
      this.$cells = [];
      this.totals = 0;
      this.method = 'site';
    }

    Book.prototype.ready = function() {
      $('#Book').empty();
      $('#Pays').empty();
      $('#Book').append(this.bookHtml());
      $('#Insts').append(this.instructHtml());
      $('#Inits').append(this.initsHtml());
      $('#Rooms').append(this.roomsHtml(this.year, this.monthIdx, this.begDay, this.numDays));
      $('#Guest').append(this.guestHtml());
      $('.guests').change(this.onGuests);
      $('.pets').change(this.onPets);
      $('#Months').change(this.onMonth);
      $('#Days').change(this.onDay);
      $('#Pop').click(this.onPop);
      $('#Err').click(this.onErr);
      $('#GoToPay').click(this.onGoToPay);
      $('#Navb').hide();
      $('#Book').show();
      return this.roomsJQuery();
    };

    Book.prototype.bookHtml = function() {
      return "<div id=\"Make\" class=\"Title\">Make Your Reservation</div>\n<div id=\"Insts\"></div>\n<div id=\"Inits\"></div>\n<div id=\"Rooms\"></div>\n<div id=\"Guest\"></div>";
    };

    Book.prototype.instructHtml = function() {
      return "<div   class=\"Instruct\">\n  <div>1. Select Month and Day of Arrival 2. Then for each Room Select:</div>\n  <div style=\"padding-left:16px;\">3. Number of Guests 4. Number of Pets 5. Click the Days</div>\n  <div>6. Enter Contact Information: First Last Names, Phone and EMail</div>\n</div>";
    };

    Book.prototype.initsHtml = function() {
      var htm;
      htm = "<label for=\"Months\" class=\"InitIp\">Start: " + (this.htmlSelect("Months", this.Data.season, this.month, 'months')) + "</label>";
      htm += "<label for=\"Days\"   class=\"InitIp\">       " + (this.htmlSelect("Days", this.Data.days, this.begDay, 'days')) + "</label>";
      htm += "<label class=\"InitIp\">&nbsp;&nbsp;" + this.year + "</label>";
      htm += "<span  id=\"Pop\" class=\"Test\">Pop</span>";
      htm += "<span  id=\"Err\" class=\"Test\">Err</span>";
      return htm;
    };

    Book.prototype.seeRoom = function(roomId, room) {
      return room.name;
    };

    Book.prototype.roomsHtml = function(year, monthIdx, begDay, numDays) {
      var day, htm, i, j, k, l, ref, ref1, ref2, ref3, ref4, room, roomId, weekday, weekdayIdx;
      weekdayIdx = new Date(year, monthIdx, 1).getDay();
      htm = "<table><thead>";
      htm += "<tr><th></th><th></th><th></th><th></th>";
      for (day = i = 1, ref = this.numDays; 1 <= ref ? i <= ref : i >= ref; day = 1 <= ref ? ++i : --i) {
        weekday = this.Data.weekdays[(weekdayIdx + this.begDay + day - 2) % 7];
        htm += "<th>" + weekday + "</th>";
      }
      htm += "<th>Room</th></tr><tr><th>Cottage</th><th>Guests</th><th>Pets</th><th>Price</th>";
      for (day = j = 1, ref1 = this.numDays; 1 <= ref1 ? j <= ref1 : j >= ref1; day = 1 <= ref1 ? ++j : --j) {
        htm += "<th>" + (this.dayMonth(day)) + "</th>";
      }
      htm += "<th>Total</th></tr></thead><tbody>";
      ref2 = this.rooms;
      for (roomId in ref2) {
        if (!hasProp.call(ref2, roomId)) continue;
        room = ref2[roomId];
        htm += "<tr id=\"" + roomId + "\"><td class=\"td-left\">" + (this.seeRoom(roomId, room)) + "</td><td class=\"guests\">" + (this.g(roomId)) + "</td><td class=\"pets\">" + (this.p(roomId)) + "</td><td id=\"" + roomId + "M\" class=\"room-price\">" + ('$' + this.calcPrice(roomId)) + "</td>";
        for (day = k = 1, ref3 = numDays; 1 <= ref3 ? k <= ref3 : k >= ref3; day = 1 <= ref3 ? ++k : --k) {
          htm += this.createCell(roomId, room, this.toDateStr(day));
        }
        htm += "<td class=\"room-total\" id=\"" + roomId + "T\"></td></tr>";
      }
      htm += "<tr>";
      for (day = l = 1, ref4 = this.numDays + 4; 1 <= ref4 ? l <= ref4 : l >= ref4; day = 1 <= ref4 ? ++l : --l) {
        htm += "<td></td>";
      }
      htm += "<td class=\"room-total\" id=\"Totals\">&nbsp;</td></tr>";
      htm += "</tbody></table>";
      return htm;
    };

    Book.prototype.guestHtml = function() {
      var phPtn;
      phPtn = "\d{3} \d{3} \d{4}";
      return "<form autocomplete=\"on\" method=\"POST\" id=\"FormName\">\n  <div id=\"Names\">\n    <span class=\"SpanIp\">\n      <label for=\"First\" class=\"control-label\">First Name</label>\n      <input id= \"First\" type=\"text\" class=\"input-lg form-control\" autocomplete=\"given-name\" required>\n      <div   id= \"FirstER\" class=\"NameER\">* Required</div>\n    </span>\n\n    <span class=\"SpanIp\">\n      <label for=\"Last\" class=\"control-label\">Last Name</label>\n      <input id= \"Last\" type=\"text\" class=\"input-lg form-control\" autocomplete=\"family-name\" required>\n      <div   id= \"LastER\" class=\"NameER\">* Required</div>\n    </span>\n\n    <span class=\"SpanIp\">\n      <label for=\"Phone\" class=\"control-label\">Phone</label>\n      <input id= \"Phone\" type=\"tel\" class=\"input-lg form-control\" placeholder=\"••• ••• ••••\"  pattern=\"" + phPtn + "\" required>\n      <div   id= \"PhoneER\" class=\"NameER\">* Required</div>\n    </span>\n\n    <span class=\"SpanIp\">\n      <label for=\"EMail\"   class=\"control-label\">Email</label>\n      <input id= \"EMail\" type=\"email\" class=\"input-lg form-control\" autocomplete=\"email\" required>\n      <div   id= \"EMailER\" class=\"NameER\">* Required</div>\n    </span>\n  </div>\n  <div id=\"GoToDiv\" style=\"text-align:center;\">\n   <button class=\"btn btn-primary\" type=\"submit\" id=\"GoToPay\">Go To Confirmation and Payment</button>\n  </div>\n</form>";
    };

    Book.prototype.isValid = function(name, test, testing) {
      var valid, value;
      if (testing == null) {
        testing = false;
      }
      value = $('#' + name).val();
      valid = Util.isStr(value);
      if (testing) {
        $('#' + name).val(test);
        value = test;
        valid = true;
      }
      return [value, valid];
    };

    getCust(testing = false)(function() {
      var cust, email, ev, first, fv, last, lv, phone, pv, ref, ref1, ref2, ref3, tv;
      ref = this.isValid('First', 'Samuel', testing), first = ref[0], fv = ref[1];
      ref1 = this.isValid('Last', 'Hosendecker', testing), last = ref1[0], lv = ref1[1];
      ref2 = this.isValid('Phone', '3037977129', testing), phone = ref2[0], pv = ref2[1];
      ref3 = this.isValid('EMail', 'Thomas.Edmund.Flaherty@gmail.com', testing), email = ref3[0], ev = ref3[1];
      tv = this.totals > 0;
      cust = this.res.createCust(first, last, phone, email, "site");
      return [tv, fv, lv, pv, ev, cust];
    });

    Book.prototype.onGoToPay = function(e) {
      var cust, ev, fv, lv, pv, ref, res, tv;
      if (e != null) {
        e.preventDefault();
      }
      ref = this.getCust(), tv = ref[0], fv = ref[1], lv = ref[2], pv = ref[3], ev = ref[4], cust = ref[5];
      if (tv && fv && lv && pv && ev) {
        $('.NameER').hide();
        $('#Book').hide();
        res = this.createRoomRes();
        res.cust = cust;
        res.total = this.totals;
        this.pay.showConfirmPay(res);
      } else {
        alert(this.onGoToMsg(tv, fv, lv, pv, ev));
      }
    };

    Book.prototype.onGoToMsg = function(tv, fv, lv, pv, ev) {
      var msg;
      msg = "";
      if (!tv) {
        msg += "Total is 0\n";
      }
      if (!tv) {
        msg += "Need to Click Rooms\n";
      }
      if (!fv) {
        msg += "Enter First Name\n";
      }
      if (!lv) {
        msg += "Enter Last  Name\n";
      }
      if (!pv) {
        msg += "Enter Phone Number\n";
      }
      if (!ev) {
        msg += "Enter Email\n";
      }
      return msg;
    };

    Book.prototype.createCell = function(roomId, roomRm, date) {
      var roomUI, status, statusRm, statusUI;
      roomUI = this.roomUIs[roomId];
      statusRm = this.room.dayBookedRm(roomRm, date);
      statusUI = this.room.dayBookedUI(roomUI, date);
      status = statusRm !== 'free' ? statusRm : statusUI;
      return "<td id=\"R" + (roomId + date) + "\" class=\"room-" + status + "\" data-status=\"" + status + "\"></td>";
    };

    Book.prototype.roomsJQuery = function() {
      var $cell, date, day, i, j, len, ref, ref1, ref2, roomId, roomUI;
      ref = this.$cells;
      for (i = 0, len = ref.length; i < len; i++) {
        $cell = ref[i];
        $cell.unbind("click");
      }
      this.$cells = [];
      ref1 = this.roomUIs;
      for (roomId in ref1) {
        roomUI = ref1[roomId];
        roomUI.$ = $('#' + roomId);
        for (day = j = 1, ref2 = this.numDays; 1 <= ref2 ? j <= ref2 : j >= ref2; day = 1 <= ref2 ? ++j : --j) {
          date = this.toDateStr(day);
          $cell = $('#R' + roomId + date);
          $cell.click((function(_this) {
            return function(event) {
              return _this.onCellBook(event);
            };
          })(this));
          this.$cells.push($cell);
          this.updateTotal(roomId);
        }
      }
    };

    Book.prototype.calcPrice = function(roomId) {
      var guests, pets, price, roomUI;
      roomUI = this.roomUIs[roomId];
      guests = roomUI.resRoom.guests;
      pets = roomUI.resRoom.pets;
      price = this.rooms[roomId][guests] + pets * this.Data.petPrice;
      roomUI.resRoom.price = price;
      return price;
    };

    Book.prototype.updatePrice = function(roomId) {
      $('#' + roomId + 'M').text("" + ('$' + this.calcPrice(roomId)));
      this.updateTotal(roomId);
    };

    Book.prototype.updateTotal = function(roomId) {
      var price, room, text;
      price = this.calcPrice(roomId);
      room = this.roomUIs[roomId];
      room.resRoom.total = price * room.numDays;
      text = room.resRoom.total === 0 ? '' : '$' + room.resRoom.total;
      $('#' + roomId + 'T').text(text);
      this.updateTotals();
    };

    Book.prototype.newCust = function() {
      return {
        status: 'mine',
        days: [],
        total: 0
      };
    };

    Book.prototype.updateTotals = function() {
      var ref, room, roomId, text;
      this.totals = 0;
      ref = this.roomUIs;
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        room = ref[roomId];
        this.totals += room.resRoom.total;
      }
      text = this.totals === 0 ? '' : '$' + this.totals;
      $('#Totals').text(text);
      if (this.totals > 0) {
        $('#GoToPay').prop('disabled', false);
      }
    };

    Book.prototype.toDay = function(date) {
      if (date.charAt(6) === '0') {
        return date.substr(7, 8);
      } else {
        return date.substr(6, 8);
      }
    };

    Book.prototype.g = function(roomId) {
      return this.htmlSelect(roomId + 'G', this.Data.persons, 2, 'guests', this.rooms[roomId].max);
    };

    Book.prototype.p = function(roomId) {
      return this.htmlSelect(roomId + 'P', this.Data.pets, 0, 'pets', 3);
    };

    Book.prototype.htmlSelect = function(htmlId, array, choice, klass, max) {
      var elem, htm, i, len, selected, where;
      if (max == null) {
        max = void 0;
      }
      htm = "<select name=\"" + htmlId + "\" id=\"" + htmlId + "\" class=\"" + klass + "\">";
      where = max != null ? function(elem) {
        return elem <= max;
      } : function() {
        return true;
      };
      for (i = 0, len = array.length; i < len; i++) {
        elem = array[i];
        if (!(where(elem))) {
          continue;
        }
        selected = elem === Util.toStr(choice) ? "selected" : "";
        htm += "<option" + (' ' + selected) + ">" + elem + "</option>";
      }
      return htm += "</select>";
    };

    Book.prototype.onGuests = function(event) {
      var roomId;
      roomId = $(event.target).attr('id').charAt(0);
      this.roomUIs[roomId].resRoom.guests = event.target.value;
      this.updatePrice(roomId);
    };

    Book.prototype.onPets = function(event) {
      var roomId;
      roomId = $(event.target).attr('id').charAt(0);
      this.roomUIs[roomId].resRoom.pets = event.target.value;
      this.updatePrice(roomId);
    };

    Book.prototype.onMonth = function(event) {
      this.month = event.target.value;
      this.monthIdx = this.Data.months.indexOf(this.month);
      this.begDay = this.month === 'May' ? this.begMay : 1;
      $('#Days').val(this.begDay.toString());
      this.resetRooms();
    };

    Book.prototype.onDay = function(event) {
      this.begDay = parseInt(event.target.value);
      if (this.month === 'October' && this.begDay > 1) {
        this.begDay = 1;
        alert('The Season Ends on October 15');
      } else {
        this.resetRooms();
      }
    };

    Book.prototype.resetRooms = function() {
      $('#Rooms').empty();
      $('#Rooms').append(this.roomsHtml(this.year, this.monthIdx, this.begDay, this.numDays));
      return this.roomsJQuery();
    };

    Book.prototype.onPop = function() {
      this.getNamesPhoneEmail(true);
      this.pay.testing = false;
    };

    Book.prototype.onErr = function() {
      Util.log('Book.onErr()');
    };

    Book.prototype.createRoomRes = function() {
      var onAdd, ref, res, room, roomId;
      res = this.res.createRoomRes(this.totals, 'mine', this.method, this.roomUIs);
      ref = res.rooms;
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        room = ref[roomId];
        onAdd = {};
        onAdd.days = room.days;
        this.store.add('Alloc', roomId, onAdd);
      }
      return res;
    };

    Book.prototype.onCellBook = function(event) {
      var $cell, ref, roomId, status;
      $cell = $(event.target);
      ref = this.cellBook($cell), roomId = ref[0], status = ref[1];
      if (status === 'mine') {
        return this.fillInRooms(roomId, $cell);
      }
    };

    Book.prototype.cellBook = function($cell) {
      var group, isEmpty, roomId, status;
      status = $cell.attr('data-status');
      roomId = $cell.attr('id').substr(1, 1);
      group = this.roomUIs[roomId].resRoom.group;
      isEmpty = Util.isObjEmpty(group);
      if (status === 'free') {
        status = 'mine';
        this.updateCellStatus($cell, 'mine');
      } else if (status === 'mine' && isEmpty) {
        status = 'free';
        this.updateCellStatus($cell, 'free');
      } else if (status === 'mine' && !isEmpty) {
        status = 'free';
        this.updateCellGroup(roomId, group, 'free');
      }
      return [roomId, status];
    };

    Book.prototype.updateCellGroup = function(roomId, group, status) {
      var $cell, day, obj;
      for (day in group) {
        if (!hasProp.call(group, day)) continue;
        obj = group[day];
        $cell = $('#R' + roomId + day);
        Util.log('Book.updateCellGroup()', {
          day: day,
          group: group
        });
        this.updateCellStatus($cell, status);
      }
    };

    Book.prototype.updateCellStatus = function($cell, status) {
      var date, roomId, roomUI;
      this.cellStatus($cell, status);
      roomId = $cell.attr('id').substr(1, 1);
      date = $cell.attr('id').substr(2, 8);
      roomUI = this.roomUIs[roomId];
      if (status === 'mine') {
        roomUI.numDays++;
        roomUI.resRoom.days[date] = {
          "status": status
        };
      } else if (status === 'free') {
        if (roomUI.numDays > 0) {
          roomUI.numDays--;
        }
        delete roomUI.resRoom.days[date];
        if (roomUI.resRoom.group[date] != null) {
          delete roomUI.resRoom.group[date];
        }
      }
      this.updateTotal(roomId);
      return [roomId, status];
    };

    Book.prototype.fillInRooms = function(roomId, $last) {
      var bday, days, roomUI, weekday, weekend;
      roomUI = this.roomUIs[roomId];
      days = Object.keys(roomUI.resRoom.days).sort();
      bday = days[0];
      weekday = this.Data.weekday(days[0]);
      weekend = weekday === 'Fri' || weekday === 'Sat';
      if (days.length === 1 && weekend) {
        this.fillInWeekend(roomId, bday);
      } else if (days.length === 2 && this.fillIsConsistent(roomId, days, $last)) {
        this.doFillInRooms(roomId, days);
      }
    };

    Book.prototype.fillInWeekend = function(roomId, bday) {
      var group, nday;
      nday = this.Data.advanceDate(bday, 1);
      if ($('#R' + roomId + nday).attr('data-status') === 'free') {
        group = this.roomUIs[roomId].resRoom.group;
        group[bday] = {
          status: 'mine'
        };
        group[nday] = {
          status: 'mine'
        };
        this.updateCellStatus($('#R' + roomId + nday), 'mine');
      }
    };

    Book.prototype.fillIsConsistent = function(roomId, days, $last) {
      var $cell, bday, eday, nday;
      bday = days[0];
      eday = days[days.length - 1];
      nday = this.Data.advanceDate(bday, 1);
      while (nday < eday) {
        $cell = $('#R' + roomId + nday);
        if (!this.Data.isElem($cell) || $cell.attr('data-status') !== 'free') {
          $last.attr('data-status', 'mine');
          this.cellBook($last);
          return false;
        }
        nday = this.Data.advanceDate(nday, 1);
      }
      return true;
    };

    Book.prototype.doFillInRooms = function(roomId, days) {
      var $cell, bday, eday, nday;
      bday = days[0];
      nday = this.Data.advanceDate(bday, 1);
      eday = days[days.length - 1];
      while (nday < eday) {
        $cell = $('#R' + roomId + nday);
        if (this.Data.isElem($('#R' + roomId + nday))) {
          this.cellBook($cell);
        }
        nday = this.Data.advanceDate(nday, 1);
      }
    };

    Book.prototype.onAlloc = function(alloc, roomId) {
      var day, obj, ref;
      ref = alloc.days;
      for (day in ref) {
        if (!hasProp.call(ref, day)) continue;
        obj = ref[day];
        this.allocCell(day, obj.status, roomId);
      }
    };

    Book.prototype.allocCell = function(day, status, roomId) {
      return this.cellStatus($('#R' + roomId + day), status);
    };

    Book.prototype.cellStatus = function($cell, status) {
      return $cell.removeClass().addClass("room-" + status).attr('data-status', status);
    };

    Book.prototype.dayMonth = function(day) {
      var monthDay;
      monthDay = day + this.begDay - 1;
      if (monthDay > this.Data.numDayMonth[this.monthIdx]) {
        return monthDay - this.Data.numDayMonth[this.monthIdx];
      } else {
        return monthDay;
      }
    };

    Book.prototype.toDateStr = function(day) {
      return this.year + Util.pad(this.monthIdx + 1) + Util.pad(this.dayMonth(day, this.begDay));
    };

    Book.prototype.make = function() {
      return this.store.make('Room');
    };

    Book.prototype.insert = function() {
      return this.store.insert('Room', this.rooms);
    };

    return Book;

  })();

}).call(this);
