// Generated by CoffeeScript 1.12.2
(function() {
  var $, Data, StripeRest,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  Data = require('js/res/Data');

  StripeRest = (function() {
    module.exports = StripeRest;

    function StripeRest(stream, store, room, cust, res) {
      this.stream = stream;
      this.store = store;
      this.room = room;
      this.cust = cust;
      this.res = res;
      this.onError = bind(this.onError, this);
      this.onCharge = bind(this.onCharge, this);
      this.onToken = bind(this.onToken, this);
      this.uri = "https://api.stripe.com/v1/";
      this.subscribe();
      $.ajaxSetup({
        headers: {
          "Authorization": Data.stripeCurlKey
        }
      });
    }

    StripeRest.prototype.subscribe = function() {
      this.stream.subscribe('tokens', this.onToken, this.onError);
      return this.stream.subscribe('charges', this.onCharge, this.onError);
    };

    StripeRest.prototype.ready = function() {
      return this.token('4242424242424242', '12', '2018', '123');
    };

    StripeRest.prototype.token = function(number, exp_month, exp_year, cvc) {
      var input;
      input = {
        "card[number]": number,
        "card[exp_month]": exp_month,
        "card[exp_year]": exp_year,
        "card[cvc]": cvc
      };
      return this.ajaxRest("tokens", 'post', input);
    };

    StripeRest.prototype.charge = function(token, amount, currency, description) {
      var input;
      input = {
        source: token,
        amount: amount,
        currency: currency,
        description: description
      };
      return this.ajaxRest("charges", 'post', input);
    };

    StripeRest.prototype.onToken = function(obj) {
      Util.log('StoreRest.onToken()', obj);
      this.token = obj.id;
      this.cardId = obj.card.id;
      return this.charge(this.token, 800, 'usd', 'First Test Charge');
    };

    StripeRest.prototype.onCharge = function(obj) {
      return Util.log('StoreRest.onCharge()', obj);
    };

    StripeRest.prototype.onError = function(obj) {
      return Util.error('StoreRest.onError()', obj);
    };

    StripeRest.prototype.ajaxRest = function(table, op, input) {
      var settings, url;
      url = this.uri + table;
      settings = {
        url: url,
        type: op
      };
      settings.headers = {
        Authorization: 'Bearer ' + Data.stripeTestKey
      };
      settings.data = input;
      settings.success = (function(_this) {
        return function(result, status, jqXHR) {
          _this.stream.publish(table, result);
          return Util.noop(jqXHR, status);
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, status, error) {
          Util.error('StoreRest.ajaxRest()', {
            status: status,
            error: error
          });
          return Util.noop(jqXHR);
        };
      })(this);
      $.ajax(settings);
    };

    StripeRest.prototype.toQuery = function(input) {
      var key, query, val;
      query = "";
      if (input == null) {
        return query;
      }
      for (key in input) {
        if (!hasProp.call(input, key)) continue;
        val = input[key];
        query += "@" + key + "=" + val;
      }
      return query[0] = '?';
    };

    StripeRest.prototype.toJSON = function(obj) {
      if (obj != null) {
        return JSON.stringify(obj);
      } else {
        return '';
      }
    };

    StripeRest.prototype.toObject = function(json) {
      if (json) {
        return JSON.parse(json);
      } else {
        return {};
      }
    };


    /*
    $.ajax({
      type: 'POST',
      url: 'https://api.stripe.com/v1/charges',
      headers: {
        Authorization: 'Bearer sk_test_YourSecretKeyHere'
      },
      data: {
        amount: 3000,
        currency: 'usd',
        source: response.id,
        description: "Charge for madison.garcia@example.com"
      },
      success: (response) => {
        console.log('successful payment: ', response);
    },
      error: (response) => {
        console.log('error payment: ', response);
     }
     })
     */

    return StripeRest;

  })();

}).call(this);
