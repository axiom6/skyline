// Generated by CoffeeScript 1.12.2
(function() {
  var $, Master,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  Master = (function() {
    module.exports = Master;

    function Master(stream, store, Data, res, pay) {
      this.stream = stream;
      this.store = store;
      this.Data = Data;
      this.res = res;
      this.pay = pay;
      this.onUpdateRes = bind(this.onUpdateRes, this);
      this.onSeasonClick = bind(this.onSeasonClick, this);
      this.onMasterClick = bind(this.onMasterClick, this);
      this.onAlloc = bind(this.onAlloc, this);
      this.allocDays = bind(this.allocDays, this);
      this.listenToResv = bind(this.listenToResv, this);
      this.selectToDays = bind(this.selectToDays, this);
      this.listenToDays = bind(this.listenToDays, this);
      this.readyCells = bind(this.readyCells, this);
      this.readyMaster = bind(this.readyMaster, this);
      this.onUploadBtn = bind(this.onUploadBtn, this);
      this.onDailysBtn = bind(this.onDailysBtn, this);
      this.onSeasonBtn = bind(this.onSeasonBtn, this);
      this.onResTable = bind(this.onResTable, this);
      this.onLookup = bind(this.onLookup, this);
      this.onMasterBtn = bind(this.onMasterBtn, this);
      this.rooms = this.res.rooms;
      this.uploadedText = "";
      this.uploadedResvs = {};
      this.resvNew = {};
      this.res.master = this;
      this.dateBeg = null;
      this.dateEnd = null;
      this.roomId = '1';
      this.lastMaster = {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      };
      this.lastSeason = {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      };
    }

    Master.prototype.ready = function() {
      this.listenToDays();
      $('#MasterBtn').click(this.onMasterBtn);
      $('#SeasonBtn').click(this.onSeasonBtn);
      $('#DailysBtn').click(this.onDailysBtn);
      $('#UploadBtn').click(this.onUploadBtn);
      this.res.dateRange(this.Data.beg, this.Data.end, this.readyMaster);
    };

    Master.prototype.onMasterBtn = function() {
      $('#Lookup').hide();
      $('#Season').hide();
      $('#Dailys').hide();
      $('#Upload').hide();
      $('#ResAdd').show();
      $('#ResTbl').show();
      $('#Master').show();
    };

    Master.prototype.onLookup = function(resv) {
      $('#ResAdd').hide();
      $('#ResTbl').hide();
      $('#Master').hide();
      $('#Season').hide();
      $('#Dailys').hide();
      $('#Upload').hide();
      $('#Lookup').empty();
      if (!Util.isObjEmpty(resv)) {
        $('#Lookup').append(this.pay.confirmHead(resv));
      }
      if (!Util.isObjEmpty(resv)) {
        $('#Lookup').append(this.pay.confirmTable(resv, 'Owner'));
      }
      $('#Lookup').show();
    };

    Master.prototype.onResTable = function(resvs) {
      $('#ResTbl').empty();
      return $('#ResTbl').append(this.resvTable(resvs));
    };

    Master.prototype.onSeasonBtn = function() {
      $('#Master').hide();
      $('#Lookup').hide();
      $('#Dailys').hide();
      $('#Upload').hide();
      if (Util.isEmpty($('#Season').children())) {
        $('#Season').append(this.seasonHtml());
      }
      $('.SeasonTitle').click((function(_this) {
        return function(event) {
          return _this.onSeasonClick(event);
        };
      })(this));
      $('#ResAdd').show();
      $('#ResTbl').show();
      $('#Season').show();
    };

    Master.prototype.onDailysBtn = function() {
      $('#ResAdd').hide();
      $('#ResTbl').hide();
      $('#Master').hide();
      $('#Lookup').hide();
      $('#Season').hide();
      $('#Upload').hide();
      if (Util.isEmpty($('#Dailys').children())) {
        $('#Dailys').append(this.dailysHtml());
      }
      $('#Dailys').show();
    };

    Master.prototype.onUploadBtn = function() {
      $('#ResAdd').hide();
      $('#ResTbl').hide();
      $('#Master').hide();
      $('#Lookup').hide();
      $('#Season').hide();
      $('#Dailys').hide();
      if (Util.isEmpty($('#Upload').children())) {
        $('#Upload').append(this.uploadHtml());
      }
      this.bindUploadPaste();
      $('#UpdateRes').click(this.onUpdateRes);
      $('#Upload').show();
    };

    Master.prototype.readyMaster = function() {
      $('#ResAdd').empty();
      $('#ResAdd').append(this.resvInput());
      $('#ResTbl').empty();
      $('#ResTbl').append(this.resvTable());
      $('#Master').empty();
      $('#Master').append(this.masterHtml());
      $('.MasterTitle').click((function(_this) {
        return function(event) {
          return _this.onMasterClick(event);
        };
      })(this));
      this.readyCells();
      this.resvInputRespond();
    };

    Master.prototype.readyCells = function() {
      var doCell;
      doCell = (function(_this) {
        return function(event) {
          var $cell, date, resvs, status;
          $cell = $(event.target);
          status = $cell.attr('data-status');
          date = $cell.attr('data-date');
          _this.roomId = $cell.attr('data-roomId');
          _this.dateBeg = event.button === 0 ? date : _this.dateBeg;
          _this.dateEnd = event.button === 2 ? date : _this.dateEnd;
          _this.popResvInput(_this.dateBeg, _this.dateEnd, _this.roomId);
          if ((_this.dateBeg != null) && (_this.dateEnd != null)) {
            resvs = _this.res.resvRange(_this.dateBeg, _this.dateEnd);
            return _this.onResvTable(resvs);
          }
        };
      })(this);
      $('[data-cell="y"]').click(doCell);
      $('[data-cell="y"]').contextmenu(doCell);
    };

    Master.prototype.popResvInput = function(beg, end, roomId) {
      var charge, nights, price, room, tax, total;
      if (beg != null) {
        $('#Arrive').text(this.Data.toMMDD(beg));
      }
      if (end != null) {
        $('#StayTo').text(this.Data.toMMDD(end));
      }
      $('#RoomId').text(this.roomId);
      if ((beg != null) && (end != null)) {
        room = this.rooms[roomId];
        nights = this.Data.nights(beg, end);
        price = room.booking;
        total = nights * price;
        tax = parseFloat(Util.toFixed(total * this.Data.tax));
        charge = total + tax;
        $('#Nights').text(nights);
        $('#Price').text(price);
        $('#Total').text(total);
        $('#Tax').text(tax);
        $('#Charge').text(charge);
      }
    };

    Master.prototype.listenToDays = function() {
      var doDays;
      doDays = (function(_this) {
        return function(data) {
          if ((data.key != null) && (data.val != null)) {
            return _this.onAlloc(data.key, data.val);
          } else if (data != null) {
            return Util.error('Master.listenToDays missing key val', data);
          } else {
            return Util.error('Master.listenToDays missing data');
          }
        };
      })(this);
      this.res.onDay('put', doDays);
    };

    Master.prototype.selectToDays = function() {
      var doDays;
      doDays = (function(_this) {
        return function(days) {
          return _this.allocDays(days);
        };
      })(this);
      this.res.onDays('select', doDays);
      this.store.select('Days');
    };

    Master.prototype.listenToResv = function() {
      var doAdd;
      doAdd = (function(_this) {
        return function(onAdd) {
          var resv;
          resv = onAdd.val;
          return _this.allocDays(resv.days);
        };
      })(this);
      this.res.onRes('add', doAdd);
    };

    Master.prototype.allocDays = function(days) {
      var day, dayId;
      for (dayId in days) {
        if (!hasProp.call(days, dayId)) continue;
        day = days[dayId];
        this.onAlloc(dayId, day);
      }
    };

    Master.prototype.onAlloc = function(dayId, day) {
      var date, roomId;
      date = this.Data.toDate(dayId);
      roomId = this.Data.roomId(dayId);
      this.allocMasterCell(roomId, date, day.status);
      this.allocSeasonCell(roomId, date, day.status);
    };

    Master.prototype.cellId = function(pre, date, roomId) {
      return pre + date + roomId;
    };

    Master.prototype.$cell = function(pre, date, roomId) {
      return $('#' + this.cellId(pre, date, roomId));
    };

    Master.prototype.createMasterCell = function(roomId, date) {
      var day, resId, status;
      day = this.res.day(date, roomId);
      status = day.status;
      resId = day.resId;
      return "<td id=\"" + (this.cellId('M', date, roomId)) + "\" class=\"room-" + status + "\" data-status=\"" + status + "\" data-res=\"" + resId + "\" data-roomId=\"" + roomId + "\" data-date=\"" + date + "\" data-cell=\"y\"></td>";
    };

    Master.prototype.allocMasterCell = function(roomId, date, status) {
      this.cellMasterStatus(this.$cell('M', date, roomId), status);
    };

    Master.prototype.allocSeasonCell = function(roomId, date, status) {
      this.cellSeasonStatus(this.$cell('S', date, roomId), status);
    };

    Master.prototype.cellMasterStatus = function($cell, status) {
      $cell.removeClass().addClass("room-" + status).attr('data-status', status);
    };

    Master.prototype.cellSeasonStatus = function($cell, status) {
      $cell.removeClass().addClass("own-" + status).attr('data-status', status);
    };

    Master.prototype.onMasterClick = function(event) {
      var $master, $month, $title;
      $title = $(event.target);
      $month = $title.parent();
      $master = $('#Master');
      if (this.lastMaster.height === 0) {
        $master.children().hide();
        this.lastMaster = {
          left: $month.css('left'),
          top: $month.css('top'),
          width: $month.css('width'),
          height: $month.css('height')
        };
        $month.css({
          left: 0,
          top: 0,
          width: '100%',
          height: '450px'
        }).show();
      } else {
        $month.css(this.lastMaster);
        $master.children().show();
        this.lastMaster.height = 0;
      }
    };

    Master.prototype.onSeasonClick = function(event) {
      var $month, $season, $title;
      $title = $(event.target);
      $month = $title.parent();
      $season = $('#Season');
      if (this.lastSeason.height === 0) {
        $season.children().hide();
        this.lastSeason = {
          left: $month.css('left'),
          top: $month.css('top'),
          width: $month.css('width'),
          height: $month.css('height')
        };
        $month.css({
          left: 0,
          top: 0,
          width: '100%',
          height: '450px'
        }).show();
      } else {
        $month.css(this.lastSeason);
        $season.children().show();
        this.lastSeason.height = 0;
      }
    };

    Master.prototype.masterHtml = function() {
      var htm, j, len, month, ref;
      htm = "";
      ref = this.Data.season;
      for (j = 0, len = ref.length; j < len; j++) {
        month = ref[j];
        htm += "<div id=\"" + month + "\" class=\"" + month + "\">" + (this.roomsHtml(this.Data.year, month)) + "</div>";
      }
      return htm;
    };

    Master.prototype.resvInput = function() {
      var htm;
      htm = "<table><thead>";
      htm += "<tr><th>Arrive</th><th>Stay To</th><th>Room</th><th>Name</th><th>Guests</th><th>Pets</th><th>Status</th><th></th><th>Nights</th><th>Price</th><th>Total</th><th>Tax</th><th>Charge</th></tr>";
      htm += "</thead><tbody>";
      htm += "<tr><td id=\"arrive\"></td><td id=\"atayTo\"></td><td id=\"roomId\"></td><td>" + (this.names()) + "</td><td>" + (this.guests()) + "</td><td>" + (this.pets()) + "</td><td>" + (this.status()) + "</td><td>" + (this.submit()) + "</td><td id=\"nights\"></td><td id=\"price\"></td><td id=\"iotal\"></td><td id=\"tax\"></td><td id=\"charge\"></td></tr>";
      htm += "</tbody></table>";
      return htm;
    };

    Master.prototype.guests = function() {
      return this.res.htmlSelect('guests', this.Data.persons, 2);
    };

    Master.prototype.pets = function() {
      return this.res.htmlSelect('pets', this.Data.pets, 0);
    };

    Master.prototype.status = function() {
      return this.res.htmlSelect('status', this.Data.statuses, 'chan');
    };

    Master.prototype.names = function() {
      return this.res.htmlInput('Names', 'Names');
    };

    Master.prototype.submit = function() {
      return this.res.htmlButton('Submit', 'Submit', 'Submit');
    };

    Master.prototype.resvInputRespond = function() {
      this.res.makeSelect('guests', this.resvNew);
      this.res.makeSelect('pets', this.resvNew);
      this.res.makeSelect('status', this.resvNew);
      this.res.makeInput('names', this.resvNew);
      return $('#Submit').click((function(_this) {
        return function(event) {
          Util.noop(event);
          return Util.log(_this.resvNew);
        };
      })(this));
    };

    Master.prototype.resvTable = function(resvs) {
      var charge, htm, r, resId, tax, u;
      htm = "<table><thead>";
      htm += "<tr><th>Arrive</th><th>Nights</th><th>Room</th><th>Name</th><th>Guests</th><th>Status</th><th>Price</th><th>Total</th><th>Tax</th><th>Charge</th></tr>";
      htm += "</thead><tbody>";
      for (resId in resvs) {
        if (!hasProp.call(resvs, resId)) continue;
        r = resvs[resId];
        u = r.u;
        tax = Util.toFixed(u.total * this.Data.tax);
        charge = u.total + parseFloat(tax);
        htm += "<tr><td>" + u.arrive + "</td><td>" + u.nights + "</td><td>" + u.roomId + "</td><td>" + u.last + "</td><td>" + u.guests + "</td><td>" + u.status + "</td><td>" + u.price + "</td><td>" + u.total + "</td><td>" + tax + "</td><td>" + charge + "</td></tr>";
      }
      htm += "</tbody></table>";
      return htm;
    };

    Master.prototype.roomsHtml = function(year, month) {
      var begDay, date, day, endDay, htm, j, k, l, monthIdx, ref, ref1, ref2, ref3, ref4, ref5, ref6, room, roomId, weekday, weekdayIdx;
      monthIdx = this.Data.months.indexOf(month);
      begDay = 1;
      endDay = this.Data.numDayMonth[monthIdx];
      weekdayIdx = new Date(2000 + year, monthIdx, 1).getDay();
      htm = "<div class=\"MasterTitle\">" + month + "</div>";
      htm += "<table><thead>";
      htm += "<tr><th></th>";
      for (day = j = ref = begDay, ref1 = endDay; ref <= ref1 ? j <= ref1 : j >= ref1; day = ref <= ref1 ? ++j : --j) {
        weekday = this.Data.weekdays[(weekdayIdx + day - 1) % 7].charAt(0);
        htm += "<th>" + weekday + "</th>";
      }
      htm += "</tr><tr><th></th>";
      for (day = k = ref2 = begDay, ref3 = endDay; ref2 <= ref3 ? k <= ref3 : k >= ref3; day = ref2 <= ref3 ? ++k : --k) {
        htm += "<th>" + day + "</th>";
      }
      htm += "</tr></thead><tbody>";
      ref4 = this.rooms;
      for (roomId in ref4) {
        if (!hasProp.call(ref4, roomId)) continue;
        room = ref4[roomId];
        htm += "<tr id=\"" + roomId + "\"><td>" + roomId + "</td>";
        for (day = l = ref5 = begDay, ref6 = endDay; ref5 <= ref6 ? l <= ref6 : l >= ref6; day = ref5 <= ref6 ? ++l : --l) {
          date = this.Data.toDateStr(day, monthIdx);
          htm += this.createMasterCell(roomId, date);
        }
        htm += "</tr>";
      }
      htm += "</tbody></table>";
      return htm;
    };

    Master.prototype.seasonHtml = function() {
      var htm, j, len, month, ref;
      htm = "";
      ref = this.Data.season;
      for (j = 0, len = ref.length; j < len; j++) {
        month = ref[j];
        htm += "<div id=\"" + month + "\" class=\"" + month + "C\">" + (this.monthTable(month)) + "</div>";
      }
      return htm;
    };

    Master.prototype.monthTable = function(month) {
      var begDay, col, day, endDay, htm, j, k, l, monthIdx, row, weekday;
      monthIdx = this.Data.months.indexOf(month);
      begDay = new Date(2000 + this.res.year, monthIdx, 1).getDay() - 1;
      endDay = this.Data.numDayMonth[monthIdx];
      htm = "<div class=\"SeasonTitle\">" + month + "</div>";
      htm += "<table class=\"MonthTable\"><thead><tr>";
      for (day = j = 0; j < 7; day = ++j) {
        weekday = this.Data.weekdays[day];
        htm += "<th>" + weekday + "</th>";
      }
      htm += "</tr></thead><tbody>";
      for (row = k = 0; k < 6; row = ++k) {
        htm += "<tr>";
        for (col = l = 0; l < 7; col = ++l) {
          day = this.monthDay(begDay, endDay, row, col);
          htm += day !== "" ? "<td>" + (this.roomDay(monthIdx, day)) + "</td>" : "<td></td>";
        }
        htm += "</tr>";
      }
      return htm += "</tbody></table>";
    };

    Master.prototype.roomDay = function(monthIdx, day) {
      var col, date, htm, j, roomId, status;
      htm = "";
      htm += "<div class=\"MonthDay\">" + day + "</div>";
      htm += "<div class=\"MonthRoom\">";
      for (col = j = 1; j <= 10; col = ++j) {
        roomId = col;
        if (roomId === 9) {
          roomId = 'N';
        }
        if (roomId === 10) {
          roomId = 'S';
        }
        date = this.Data.toDateStr(day, monthIdx);
        status = this.res.getStatus(roomId, date);
        if (status !== 'free') {
          htm += "<span id=\"" + (this.roomDayId(monthIdx, day, roomId)) + "\" class=\"own-" + status + "\">" + roomId + " data-res=\"y\"</span>";
        }
      }
      htm += "</div>";
      return htm;
    };

    Master.prototype.roomDayId = function(monthIdx, day, roomId) {
      var date;
      date = this.Data.dateStr(day, monthIdx);
      return this.cellId('S', roomId, date);
    };

    Master.prototype.monthDay = function(begDay, endDay, row, col) {
      var day;
      day = row * 7 + col - begDay;
      day = 1 <= day && day <= endDay ? day : "";
      return day;
    };

    Master.prototype.dailysHtml = function() {
      var htm;
      htm = "";
      htm += "<h1 class=\"DailysH1\">Daily Activities</h1>";
      htm += "<h2 class=\"DailysH2\">Arrivals</h2>";
      htm += "<h2 class=\"DailysH2\">Departures</h2>";
      return htm;
    };

    Master.prototype.uploadHtml = function() {
      var htm;
      htm = "";
      htm += "<h1 class=\"UploadH1\">Upload Booking.com</h1>";
      htm += "<button id=\"UpdateRes\" class=\"btn btn-primary\">Update Res</button>";
      htm += "<textarea id=\"UploadText\" class=\"UploadText\" rows=\"50\" cols=\"100\"></textarea>";
      return htm;
    };

    Master.prototype.bindUploadPaste = function() {
      var onPaste;
      onPaste = (function(_this) {
        return function(event) {
          if (window.clipboardData && window.clipboardData.getData) {
            _this.uploadedText = window.clipboardData.getData('Text');
          } else if (event.clipboardData && event.clipboardData.getData) {
            _this.uploadedText = event.clipboardData.getData('text/plain');
          }
          event.preventDefault();
          if (Util.isStr(_this.uploadedText)) {
            _this.uploadedResvs = _this.uploadParse(_this.uploadedText);
            return $('#UploadText').text(_this.uploadedText);
          }
        };
      })(this);
      return document.addEventListener("paste", onPaste);
    };

    Master.prototype.uploadParse = function(text) {
      var book, j, len, line, lines, resv, resvs, toks;
      resvs = {};
      if (!Util.isStr(text)) {
        return obj;
      }
      lines = text.split('\n');
      for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        toks = line.split('\t');
        if (toks[0] === 'Guest name') {
          continue;
        }
        book = this.bookFromToks(toks);
        resv = this.resvFromBook(book);
        resvs[resv.resId] = resv;
      }
      return resvs;
    };

    Master.prototype.bookFromToks = function(toks) {
      var book;
      book = {};
      book.names = toks[0];
      book.arrive = toks[1];
      book.depart = toks[2];
      book.room = toks[3];
      book.booked = toks[4];
      book.status = toks[5];
      book.total = toks[6];
      book.commis = toks[7];
      book.bookingId = toks[8];
      return book;
    };

    Master.prototype.resvFromBook = function(book) {
      var arrive, depart, guests, last, names, roomId, status, total;
      names = book.names.split(' ');
      arrive = this.toResvDate(book.arrive);
      depart = this.toResvDate(book.depart);
      roomId = this.toResvRoomId(book.room);
      last = names[1];
      status = this.toStatus(book.status);
      guests = this.toNumGuests(names);
      total = parseFloat(book.total.substr(3));
      return this.res.createResvBooking(arrive, depart, roomId, last, status, guests, total);
    };

    Master.prototype.onUpdateRes = function() {
      if (!Util.isStr(this.uploadedText)) {
        this.uploadedText = this.Data.bookingResvs;
        this.uploadedResvs = this.uploadParse(this.uploadedText);
        $('#UploadText').text(this.uploadedText);
      }
      if (Util.isObjEmpty(this.uploadedResvs)) {
        return;
      }
      if (!this.updateValid(this.uploadedResvs)) {
        return;
      }
      this.res.updateResvs(this.uploadedResvs);
      return this.uploadedResv = {};
    };

    Master.prototype.updateValid = function(uploadedResvs) {
      var resId, u, valid;
      valid = true;
      for (resId in uploadedResvs) {
        if (!hasProp.call(uploadedResvs, resId)) continue;
        u = uploadedResvs[resId];
        u.v = true;
        u.v &= Util.isStr(u.last);
        u.v &= 1 <= u.guests && u.guests <= 12;
        u.v &= this.Data.isDate(u.arrive);
        u.v &= this.Data.isDate(u.depart);
        u.v &= typeof pets === 'number' ? 0 <= u.pets && u.pets <= 4 : true;
        u.v &= 0 <= u.nights && u.nights <= 28;
        u.v &= Util.inArray(this.res.roomKeys, u.roomId);
        u.v &= 0.00 <= u.total && u.total <= 8820.00;
        u.v &= 120.00 <= u.price && u.price <= 315.00;
        valid &= u.v;
      }
      Util.log('Master.updateValid()', valid);
      return true;
    };

    Master.prototype.updateVerbose = function(uploadedResvs) {
      var resId, u;
      for (resId in uploadedResvs) {
        if (!hasProp.call(uploadedResvs, resId)) continue;
        u = uploadedResvs[resId];
        if (!Util.isStr(u.last)) {
          Util.log('last  ', u.last);
        }
        if (!(1 <= u.guests && u.guests <= 12)) {
          Util.log('guests', u.guests);
        }
        if (!this.Data.isDate(u.arrive)) {
          Util.log('arrive', u.arrive);
        }
        if (!this.Data.isDate(u.depart)) {
          Util.log('depart', u.depart);
        }
        if (!(0 <= u.nights && u.nights <= 28)) {
          Util.log('nights', u.nights);
        }
        if (!Util.inArray(this.res.roomKeys, u.roomId)) {
          Util.log('roomId', u.roomId);
        }
        if (!(0.00 <= u.total && u.total <= 8820.00)) {
          Util.log('total ', u.total);
        }
        if (!(120.00 <= u.price && u.price <= 315.00)) {
          Util.log('price ', u.price);
        }
      }
    };

    Master.prototype.toNumGuests = function(names) {
      var i, j, ref;
      for (i = j = 0, ref = names.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (names[i] === 'guest' || names[i] === 'guests') {
          return names[i - 1];
        }
      }
      return '0';
    };

    Master.prototype.toResvDate = function(bookDate) {
      var day, month, toks, year;
      toks = bookDate.split(' ');
      year = this.Data.year;
      month = this.Data.months.indexOf(toks[1]) + 1;
      day = toks[0];
      return year.toString() + Util.pad(month) + day;
    };

    Master.prototype.toResvRoomId = function(bookRoom) {
      var toks;
      toks = bookRoom.split(' ');
      if (toks[0].charAt(0) === '#') {
        return toks[0].charAt(1);
      } else {
        return toks[2].charAt(0);
      }
    };

    Master.prototype.toStatus = function(bookingStatus) {
      switch (bookingStatus) {
        case 'OK':
          return 'chan';
        case 'Canceled':
          return 'canc';
        default:
          return 'unkn';
      }
    };

    return Master;

  })();

}).call(this);
