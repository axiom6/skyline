// Generated by CoffeeScript 1.12.2
(function() {
  var $, Master, Upload,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  Upload = require('js/res/Upload');

  Master = (function() {
    module.exports = Master;

    function Master(stream, store, Data, res) {
      this.stream = stream;
      this.store = store;
      this.Data = Data;
      this.res = res;
      this.onSeasonClick = bind(this.onSeasonClick, this);
      this.onMasterClick = bind(this.onMasterClick, this);
      this.onAlloc = bind(this.onAlloc, this);
      this.allocDays = bind(this.allocDays, this);
      this.selectToDays = bind(this.selectToDays, this);
      this.listenToResv = bind(this.listenToResv, this);
      this.listenToDays = bind(this.listenToDays, this);
      this.readyCells = bind(this.readyCells, this);
      this.readyMaster = bind(this.readyMaster, this);
      this.onUploadBtn = bind(this.onUploadBtn, this);
      this.onDailysBtn = bind(this.onDailysBtn, this);
      this.onSeasonBtn = bind(this.onSeasonBtn, this);
      this.onResvTable = bind(this.onResvTable, this);
      this.onMakResBtn = bind(this.onMakResBtn, this);
      this.onMasterBtn = bind(this.onMasterBtn, this);
      this.rooms = this.res.rooms;
      this.upload = new Upload(this.stream, this.store, this.Data, this.res);
      this.resvNew = {};
      this.res.master = this;
      this.dateBeg = null;
      this.dateEnd = null;
      this.resMode = 'Table';
      this.roomId = null;
      this.lastMaster = {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      };
      this.lastSeason = {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      };
    }

    Master.prototype.ready = function() {
      this.listenToDays();
      $('#MasterBtn').click(this.onMasterBtn);
      $('#MakResBtn').click(this.onMakResBtn);
      $('#SeasonBtn').click(this.onSeasonBtn);
      $('#DailysBtn').click(this.onDailysBtn);
      $('#UploadBtn').click(this.onUploadBtn);
      this.res.selectAllDays(this.readyMaster);
    };

    Master.prototype.onMasterBtn = function() {
      this.resMode = 'Table';
      $('#Season').hide();
      $('#Dailys').hide();
      $('#Upload').hide();
      $('#ResAdd').hide();
      $('#ResTbl').show();
      $('#Master').show();
    };

    Master.prototype.onMakResBtn = function() {
      this.resMode = 'Input';
      $('#Season').hide();
      $('#Dailys').hide();
      $('#Upload').hide();
      $('#ResAdd').show();
      $('#ResTbl').hide();
      $('#Master').show();
    };

    Master.prototype.onResvTable = function(resvs) {
      $('#ResTbl').empty();
      return $('#ResTbl').append(this.resvTable(resvs));
    };

    Master.prototype.onSeasonBtn = function() {
      $('#Master').hide();
      $('#Dailys').hide();
      $('#Upload').hide();
      if (Util.isEmpty($('#Season').children())) {
        $('#Season').append(this.seasonHtml());
      }
      $('.SeasonTitle').click((function(_this) {
        return function(event) {
          return _this.onSeasonClick(event);
        };
      })(this));
      $('#ResAdd').hide();
      $('#ResTbl').show();
      $('#Season').show();
    };

    Master.prototype.onDailysBtn = function() {
      $('#ResAdd').hide();
      $('#ResTbl').hide();
      $('#Master').hide();
      $('#Season').hide();
      $('#Upload').hide();
      if (Util.isEmpty($('#Dailys').children())) {
        $('#Dailys').append(this.dailysHtml());
      }
      $('#Dailys').show();
    };

    Master.prototype.onUploadBtn = function() {
      $('#ResAdd').hide();
      $('#ResTbl').hide();
      $('#Master').hide();
      $('#Season').hide();
      $('#Dailys').hide();
      if (Util.isEmpty($('#Upload').children())) {
        $('#Upload').append(this.upload.html());
      }
      this.upload.bindUploadPaste();
      $('#UpdateRes').click(this.upload.onUpdateRes);
      $('#Upload').show();
    };

    Master.prototype.readyMaster = function() {
      $('#ResAdd').empty();
      $('#ResAdd').append(this.resvInput());
      $('#ResAdd').hide();
      $('#ResTbl').empty();
      $('#ResTbl').append(this.resvTable({}));
      $('#Master').empty();
      $('#Master').append(this.masterHtml());
      $('.MasterTitle').click((function(_this) {
        return function(event) {
          return _this.onMasterClick(event);
        };
      })(this));
      this.res.selectAllResvs(this.readyCells);
      this.resvInputRespond();
    };

    Master.prototype.readyCells = function() {
      var doCell;
      doCell = (function(_this) {
        return function(event) {
          var $cell, date, ref, resvs, status;
          $cell = $(event.target);
          status = $cell.attr('data-status');
          date = $cell.attr('data-date');
          _this.fillInCells(_this.dateBeg, _this.dateEnd, _this.roomId, 'mine', 'free');
          if (_this.resMode === 'Table') {
            resvs = _this.res.resvRange(date);
            return _this.onResvTable(resvs);
          } else if (_this.resMode === 'Input') {
            _this.roomId = $cell.attr('data-roomId');
            ref = _this.mouseDates(date), _this.dateBeg = ref[0], _this.dateEnd = ref[1];
            if (_this.fillInCells(_this.dateBeg, _this.dateEnd, _this.roomId, 'free', 'mine')) {
              return _this.popResvInput(_this.dateBeg, _this.dateEnd, _this.roomId);
            }
          }
        };
      })(this);
      $('[data-cell="y"]').click(doCell);
      $('[data-cell="y"]').contextmenu(doCell);
    };

    Master.prototype.mouseDates = function(date) {
      if ((this.dateBeg != null) && this.dateBeg <= date) {
        this.dateEnd = date;
      } else {
        this.dateBeg = date;
        this.dateEnd = date;
      }
      return [this.dateBeg, this.dateEnd];
    };

    Master.prototype.fillInCells = function(begDate, endDate, roomId, freeStatus, fillStatus) {
      var $cell, $cells, cstat, i, len, nxtDate;
      if (!((begDate != null) && (endDate != null) && (roomId != null))) {
        return;
      }
      $cells = [];
      nxtDate = begDate;
      while (nxtDate <= endDate) {
        $cell = this.$cell('M', nxtDate, roomId);
        cstat = $cell.attr('data-status');
        if (cstat === freeStatus || cstat === fillStatus) {
          $cells.push($cell);
          nxtDate = this.Data.advanceDate(nxtDate, 1);
        } else {
          return false;
        }
      }
      for (i = 0, len = $cells.length; i < len; i++) {
        $cell = $cells[i];
        this.$cellStatus($cell, fillStatus);
      }
      return true;
    };

    Master.prototype.$cellStatus = function($cell, status) {
      return $cell.removeClass().addClass("room-" + status).attr('data-status', status);
    };

    Master.prototype.popResvInput = function(arrive, stayto, roomId) {
      var charge, depart, nights, price, room, tax, total;
      if (arrive != null) {
        $('#arrive').text(this.Data.toMMDD(arrive));
      }
      if (stayto != null) {
        $('#stayTo').text(this.Data.toMMDD(stayto));
      }
      $('#roomId').text(this.roomId);
      if ((arrive != null) && (stayto != null)) {
        room = this.rooms[roomId];
        depart = this.Data.advanceDate(stayto, 1);
        nights = this.Data.nights(arrive, depart);
        price = room.booking;
        total = nights * price;
        tax = parseFloat(Util.toFixed(total * this.Data.tax));
        charge = Util.toFixed(total + tax);
        $('#nights').text(nights);
        $('#price').text(price);
        $('#total').text(total);
        $('#tax').text(tax);
        $('#charge').text(charge);
      }
    };

    Master.prototype.listenToDays = function() {
      var doDays;
      doDays = (function(_this) {
        return function(dayId, day) {
          if ((dayId != null) && (day != null) && !_this.res.days[dayId]) {
            _this.res.days[dayId] = day;
            return _this.onAlloc(dayId, day);
          }
        };
      })(this);
      this.res.onDay('put', doDays);
    };

    Master.prototype.listenToResv = function() {
      var doAdd;
      doAdd = (function(_this) {
        return function(resId, resv) {
          if ((resId != null) && (resv != null) && !_this.res.resvs[resId]) {
            return _this.res.resvs[resId] = resv;
          }
        };
      })(this);
      this.res.onRes('add', doAdd);
    };

    Master.prototype.selectToDays = function() {
      var doDays;
      doDays = (function(_this) {
        return function(days) {
          return _this.allocDays(days);
        };
      })(this);
      this.res.onDays('select', doDays);
      this.store.select('Days');
    };

    Master.prototype.allocDays = function(days) {
      var day, dayId;
      for (dayId in days) {
        if (!hasProp.call(days, dayId)) continue;
        day = days[dayId];
        this.onAlloc(dayId, day);
      }
    };

    Master.prototype.onAlloc = function(dayId, day) {
      var date, roomId;
      date = this.Data.toDate(dayId);
      roomId = this.Data.roomId(dayId);
      this.allocMasterCell(roomId, date, day.status);
      this.allocSeasonCell(roomId, date, day.status);
    };

    Master.prototype.cellId = function(pre, date, roomId) {
      return pre + date + roomId;
    };

    Master.prototype.$cell = function(pre, date, roomId) {
      return $('#' + this.cellId(pre, date, roomId));
    };

    Master.prototype.createMasterCell = function(roomId, date) {
      var day, resId, status;
      day = this.res.day(date, roomId);
      status = day.status;
      resId = day.resId;
      return "<td id=\"" + (this.cellId('M', date, roomId)) + "\" class=\"room-" + status + "\" data-status=\"" + status + "\" data-res=\"" + resId + "\" data-roomId=\"" + roomId + "\" data-date=\"" + date + "\" data-cell=\"y\"></td>";
    };

    Master.prototype.allocMasterCell = function(roomId, date, status) {
      this.cellMasterStatus(this.$cell('M', date, roomId), status);
    };

    Master.prototype.allocSeasonCell = function(roomId, date, status) {
      this.cellSeasonStatus(this.$cell('S', date, roomId), status);
    };

    Master.prototype.cellMasterStatus = function($cell, status) {
      $cell.removeClass().addClass("room-" + status).attr('data-status', status);
    };

    Master.prototype.cellSeasonStatus = function($cell, status) {
      $cell.removeClass().addClass("own-" + status).attr('data-status', status);
    };

    Master.prototype.onMasterClick = function(event) {
      var $master, $month, $title;
      $title = $(event.target);
      $month = $title.parent();
      $master = $('#Master');
      if (this.lastMaster.height === 0) {
        $master.children().hide();
        this.lastMaster = {
          left: $month.css('left'),
          top: $month.css('top'),
          width: $month.css('width'),
          height: $month.css('height')
        };
        $month.css({
          left: 0,
          top: 0,
          width: '100%',
          height: '450px'
        }).show();
      } else {
        $month.css(this.lastMaster);
        $master.children().show();
        this.lastMaster.height = 0;
      }
    };

    Master.prototype.onSeasonClick = function(event) {
      var $month, $season, $title;
      $title = $(event.target);
      $month = $title.parent();
      $season = $('#Season');
      if (this.lastSeason.height === 0) {
        $season.children().hide();
        this.lastSeason = {
          left: $month.css('left'),
          top: $month.css('top'),
          width: $month.css('width'),
          height: $month.css('height')
        };
        $month.css({
          left: 0,
          top: 0,
          width: '100%',
          height: '450px'
        }).show();
      } else {
        $month.css(this.lastSeason);
        $season.children().show();
        this.lastSeason.height = 0;
      }
    };

    Master.prototype.masterHtml = function() {
      var htm, i, len, month, ref;
      htm = "";
      ref = this.Data.season;
      for (i = 0, len = ref.length; i < len; i++) {
        month = ref[i];
        htm += "<div id=\"" + month + "\" class=\"" + month + "\">" + (this.roomsHtml(this.Data.year, month)) + "</div>";
      }
      return htm;
    };

    Master.prototype.resvInput = function() {
      var htm;
      htm = "<table><thead>";
      htm += "<tr><th>Arrive</th><th>Stay To</th><th>Room</th><th>Name</th><th>Guests</th><th>Pets</th><th>Status</th><th></th><th>Nights</th><th>Price</th><th>Total</th><th>Tax</th><th>Charge</th></tr>";
      htm += "</thead><tbody>";
      htm += "<tr><td id=\"arrive\"></td><td id=\"stayTo\"></td><td id=\"roomId\"></td><td>" + (this.names()) + "</td><td>" + (this.guests()) + "</td><td>" + (this.pets()) + "</td><td>" + (this.status()) + "</td><td>" + (this.submit()) + "</td><td id=\"nights\"></td><td id=\"price\"></td><td id=\"total\"></td><td id=\"tax\"></td><td id=\"charge\"></td></tr>";
      htm += "</tbody></table>";
      return htm;
    };

    Master.prototype.guests = function() {
      return this.res.htmlSelect('guests', this.Data.persons, 2);
    };

    Master.prototype.pets = function() {
      return this.res.htmlSelect('pets', this.Data.pets, 0);
    };

    Master.prototype.status = function() {
      return this.res.htmlSelect('status', this.Data.statuses, 'chan');
    };

    Master.prototype.names = function() {
      return this.res.htmlInput('Names', 'Names');
    };

    Master.prototype.submit = function() {
      return this.res.htmlButton('Submit', 'Submit', 'Submit');
    };

    Master.prototype.resvInputRespond = function() {
      this.res.makeSelect('guests', this.resvNew);
      this.res.makeSelect('pets', this.resvNew);
      this.res.makeSelect('status', this.resvNew);
      this.res.makeInput('names', this.resvNew);
      return $('#Submit').click((function(_this) {
        return function(event) {
          Util.noop(event);
          return Util.log(_this.resvNew);
        };
      })(this));
    };

    Master.prototype.resvTable = function(resvs) {
      var arrive, booked, charge, htm, r, resId, stayto, tax;
      htm = "<table class=\"RTTable\"><thead>";
      htm += "<tr><th>Arrive</th><th>Stay To</th><th>Nights</th><th>Room</th><th>Name</th><th>Guests</th><th>Status</th><th>Booked</th><th>Price</th><th>Total</th><th>Tax</th><th>Charge</th></tr>";
      htm += "</thead><tbody>";
      for (resId in resvs) {
        if (!hasProp.call(resvs, resId)) continue;
        r = resvs[resId];
        arrive = this.Data.toMMDD(r.arrive);
        stayto = this.Data.toMMDD(r.stayto);
        booked = this.Data.toMMDD(r.booked);
        tax = Util.toFixed(r.total * this.Data.tax);
        charge = Util.toFixed(r.total + parseFloat(tax));
        htm += "<tr>";
        htm += "<td class=\"RTArrive\">" + arrive + "  </td><td class=\"RTStayto\">" + stayto + "</td><td class=\"RTNights\">" + r.nights + "</td>";
        htm += "<td class=\"RTRoomId\">" + r.roomId + "</td><td class=\"RTLast\"  >" + r.last + "</td><td class=\"RTGuests\">" + r.guests + "</td>";
        htm += "<td class=\"RTStatus\">" + r.status + "</td><td class=\"RTBooked\">" + booked + "</td><td class=\"RTPrice\" >$" + r.price + "</td>";
        htm += "<td class=\"RTTotal\" >$" + r.total + "</td><td class=\"RTTax\"   >$" + tax + "  </td><td class=\"RTCharge\">$" + charge + " </td></tr>";
      }
      htm += "</tbody></table>";
      return htm;
    };

    Master.prototype.roomsHtml = function(year, month) {
      var begDay, date, day, endDay, htm, i, j, k, monthIdx, ref, ref1, ref2, ref3, ref4, ref5, ref6, room, roomId, weekday, weekdayIdx;
      monthIdx = this.Data.months.indexOf(month);
      begDay = 1;
      endDay = this.Data.numDayMonth[monthIdx];
      weekdayIdx = new Date(2000 + year, monthIdx, 1).getDay();
      htm = "<div class=\"MasterTitle\">" + month + "</div>";
      htm += "<table><thead>";
      htm += "<tr><th></th>";
      for (day = i = ref = begDay, ref1 = endDay; ref <= ref1 ? i <= ref1 : i >= ref1; day = ref <= ref1 ? ++i : --i) {
        weekday = this.Data.weekdays[(weekdayIdx + day - 1) % 7].charAt(0);
        htm += "<th>" + weekday + "</th>";
      }
      htm += "</tr><tr><th></th>";
      for (day = j = ref2 = begDay, ref3 = endDay; ref2 <= ref3 ? j <= ref3 : j >= ref3; day = ref2 <= ref3 ? ++j : --j) {
        htm += "<th>" + day + "</th>";
      }
      htm += "</tr></thead><tbody>";
      ref4 = this.rooms;
      for (roomId in ref4) {
        if (!hasProp.call(ref4, roomId)) continue;
        room = ref4[roomId];
        htm += "<tr id=\"" + roomId + "\"><td>" + roomId + "</td>";
        for (day = k = ref5 = begDay, ref6 = endDay; ref5 <= ref6 ? k <= ref6 : k >= ref6; day = ref5 <= ref6 ? ++k : --k) {
          date = this.Data.toDateStr(day, monthIdx);
          htm += this.createMasterCell(roomId, date);
        }
        htm += "</tr>";
      }
      htm += "</tbody></table>";
      return htm;
    };

    Master.prototype.seasonHtml = function() {
      var htm, i, len, month, ref;
      htm = "";
      ref = this.Data.season;
      for (i = 0, len = ref.length; i < len; i++) {
        month = ref[i];
        htm += "<div id=\"" + month + "\" class=\"" + month + "C\">" + (this.monthTable(month)) + "</div>";
      }
      return htm;
    };

    Master.prototype.monthTable = function(month) {
      var begDay, col, day, endDay, htm, i, j, k, monthIdx, row, weekday;
      monthIdx = this.Data.months.indexOf(month);
      begDay = new Date(2000 + this.res.year, monthIdx, 1).getDay() - 1;
      endDay = this.Data.numDayMonth[monthIdx];
      htm = "<div class=\"SeasonTitle\">" + month + "</div>";
      htm += "<table class=\"MonthTable\"><thead><tr>";
      for (day = i = 0; i < 7; day = ++i) {
        weekday = this.Data.weekdays[day];
        htm += "<th>" + weekday + "</th>";
      }
      htm += "</tr></thead><tbody>";
      for (row = j = 0; j < 6; row = ++j) {
        htm += "<tr>";
        for (col = k = 0; k < 7; col = ++k) {
          day = this.monthDay(begDay, endDay, row, col);
          htm += day !== "" ? "<td>" + (this.roomDay(monthIdx, day)) + "</td>" : "<td></td>";
        }
        htm += "</tr>";
      }
      return htm += "</tbody></table>";
    };

    Master.prototype.roomDay = function(monthIdx, day) {
      var col, date, htm, i, roomId, status;
      htm = "";
      htm += "<div class=\"MonthDay\">" + day + "</div>";
      htm += "<div class=\"MonthRoom\">";
      for (col = i = 1; i <= 10; col = ++i) {
        roomId = col;
        if (roomId === 9) {
          roomId = 'N';
        }
        if (roomId === 10) {
          roomId = 'S';
        }
        date = this.Data.toDateStr(day, monthIdx);
        status = this.res.getStatus(roomId, date);
        if (status !== 'free') {
          htm += "<span id=\"" + (this.roomDayId(monthIdx, day, roomId)) + "\" class=\"own-" + status + "\">" + roomId + " data-res=\"y\"</span>";
        }
      }
      htm += "</div>";
      return htm;
    };

    Master.prototype.roomDayId = function(monthIdx, day, roomId) {
      var date;
      date = this.Data.dateStr(day, monthIdx);
      return this.cellId('S', roomId, date);
    };

    Master.prototype.monthDay = function(begDay, endDay, row, col) {
      var day;
      day = row * 7 + col - begDay;
      day = 1 <= day && day <= endDay ? day : "";
      return day;
    };

    Master.prototype.dailysHtml = function() {
      var htm;
      htm = "";
      htm += "<h1 class=\"DailysH1\">Daily Activities</h1>";
      htm += "<h2 class=\"DailysH2\">Arrivals</h2>";
      htm += "<h2 class=\"DailysH2\">Departures</h2>";
      return htm;
    };

    return Master;

  })();

}).call(this);
