// Generated by CoffeeScript 1.12.2
(function() {
  var $, Master,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  Master = (function() {
    module.exports = Master;

    function Master(stream, store, Data, res) {
      this.stream = stream;
      this.store = store;
      this.Data = Data;
      this.res = res;
      this.onSeasonClick = bind(this.onSeasonClick, this);
      this.onMasterClick = bind(this.onMasterClick, this);
      this.onAlloc = bind(this.onAlloc, this);
      this.listenToResv = bind(this.listenToResv, this);
      this.listenToDays = bind(this.listenToDays, this);
      this.onDateRange = bind(this.onDateRange, this);
      this.showResv = bind(this.showResv, this);
      this.onDailysBtn = bind(this.onDailysBtn, this);
      this.onSeasonBtn = bind(this.onSeasonBtn, this);
      this.onMasterBtn = bind(this.onMasterBtn, this);
      this.rooms = this.res.rooms;
      this.res.master = this;
      this.lastMaster = {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      };
      this.lastSeason = {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      };
      this.res.beg = this.Data.toDateStr(1, 4);
      this.res.end = this.Data.toDateStr(31, 9);
    }

    Master.prototype.ready = function() {
      this.res.dateRange(this.onDateRange);
      this.listenToDays();
      $('#MasterBtn').click(this.onMasterBtn);
      $('#SeasonBtn').click(this.onSeasonBtn);
      $('#DailysBtn').click(this.onDailysBtn);
    };

    Master.prototype.onMasterBtn = function() {
      $('#Season').hide();
      $('#Dailys').hide();
      $('#Master').show();
    };

    Master.prototype.onSeasonBtn = function() {
      $('#Dailys').hide();
      $('#Master').hide();
      if (Util.isEmpty($('#Season').children())) {
        $('#Season').append(this.seasonHtml());
      }
      $('.SeasonTitle').click((function(_this) {
        return function(event) {
          return _this.onSeasonClick(event);
        };
      })(this));
      $('#Season').show();
    };

    Master.prototype.onDailysBtn = function() {
      $('#Season').hide();
      $('#Master').hide();
      if (Util.isEmpty($('#Dailys').children())) {
        $('#Dailys').append(this.dailysHtml());
      }
      $('#Dailys').show();
    };

    Master.prototype.readyMaster = function() {
      $('#Master').append(this.masterHtml());
      $('.MasterTitle').click((function(_this) {
        return function(event) {
          return _this.onMasterClick(event);
        };
      })(this));
      this.readyCells();
    };

    Master.prototype.showResv = function(resv) {
      var str;
      str = Util.toStrObj(resv);
      alert(str);
    };

    Master.prototype.readyCells = function() {
      var doCell;
      doCell = (function(_this) {
        return function(event) {
          var $cell, resId, status;
          $cell = $(event.target);
          status = $cell.attr('data-status');
          resId = $cell.attr('data-res');
          Util.log('doCell', {
            resId: resId,
            status: status
          });
          if (status !== 'free') {
            _this.res.onResId('get', _this.showResv, resId);
            return _this.store.get('Res', resId);
          }
        };
      })(this);
      $('[data-cell="y"]').click(doCell);
    };

    Master.prototype.onDateRange = function() {
      var dayId, dayRoom, ref;
      this.readyMaster();
      ref = this.res.days;
      for (dayId in ref) {
        if (!hasProp.call(ref, dayId)) continue;
        dayRoom = ref[dayId];
        this.onAlloc(dayId, dayRoom);
      }
    };

    Master.prototype.listenToDays = function() {
      var doPut;
      doPut = (function(_this) {
        return function(onPut) {
          console.log('Master.listenToDays()', onPut.key, onPut.val);
          return _this.onAlloc(onPut.key, onPut.val);
        };
      })(this);
      this.res.onDays('put', doPut);
    };

    Master.prototype.listenToResv = function() {
      var doAdd;
      doAdd = (function(_this) {
        return function(onAdd) {
          var dayId, rday, ref, results, resv, room, roomId;
          resv = onAdd.val;
          Util.log('Master.listenToResv() onAdd', resv);
          ref = resv.rooms;
          results = [];
          for (roomId in ref) {
            if (!hasProp.call(ref, roomId)) continue;
            room = ref[roomId];
            results.push((function() {
              var ref1, results1;
              ref1 = room.days;
              results1 = [];
              for (dayId in ref1) {
                if (!hasProp.call(ref1, dayId)) continue;
                rday = ref1[dayId];
                results1.push(this.onAlloc(dayId, rday));
              }
              return results1;
            }).call(_this));
          }
          return results;
        };
      })(this);
      this.res.onResv('add', doAdd);
    };

    Master.prototype.onAlloc = function(dayId, dayRoom) {
      var room, roomId;
      for (roomId in dayRoom) {
        if (!hasProp.call(dayRoom, roomId)) continue;
        room = dayRoom[roomId];
        this.allocMasterCell(roomId, dayId, room.status);
        this.allocSeasonCell(roomId, dayId, room.status);
      }
    };

    Master.prototype.cellId = function(pre, date, roomId) {
      return pre + date + roomId;
    };

    Master.prototype.$cell = function(pre, date, roomId) {
      return $('#' + this.cellId(pre, date, roomId));
    };

    Master.prototype.createMasterCell = function(roomId, room, date) {
      var resId, status;
      status = this.res.dayBooked(room, date);
      resId = this.res.resId(room, date);
      return "<td id=\"" + (this.cellId('M', date, roomId)) + "\" class=\"room-" + status + "\" data-status=\"" + status + "\" data-res=\"" + resId + "\" data-cell=\"y\"></td>";
    };

    Master.prototype.allocMasterCell = function(roomId, date, status) {
      this.cellMasterStatus(this.$cell('M', date, roomId), status);
    };

    Master.prototype.allocSeasonCell = function(roomId, date, status) {
      this.cellSeasonStatus(this.$cell('S', date, roomId), status);
    };

    Master.prototype.cellMasterStatus = function($cell, status) {
      $cell.removeClass().addClass("room-" + status).attr('data-status', status);
    };

    Master.prototype.cellSeasonStatus = function($cell, status) {
      $cell.removeClass().addClass("own-" + status).attr('data-status', status);
    };

    Master.prototype.onMasterClick = function(event) {
      var $master, $month, $title;
      $title = $(event.target);
      $month = $title.parent();
      $master = $('#Master');
      if (this.lastMaster.height === 0) {
        $master.children().hide();
        this.lastMaster = {
          left: $month.css('left'),
          top: $month.css('top'),
          width: $month.css('width'),
          height: $month.css('height')
        };
        $month.css({
          left: 0,
          top: 0,
          width: '100%',
          height: '450px'
        }).show();
      } else {
        $month.css(this.lastMaster);
        $master.children().show();
        this.lastMaster.height = 0;
      }
    };

    Master.prototype.onSeasonClick = function(event) {
      var $month, $season, $title;
      $title = $(event.target);
      $month = $title.parent();
      $season = $('#Season');
      if (this.lastSeason.height === 0) {
        $season.children().hide();
        this.lastSeason = {
          left: $month.css('left'),
          top: $month.css('top'),
          width: $month.css('width'),
          height: $month.css('height')
        };
        $month.css({
          left: 0,
          top: 0,
          width: '100%',
          height: '450px'
        }).show();
      } else {
        $month.css(this.lastSeason);
        $season.children().show();
        this.lastSeason.height = 0;
      }
    };

    Master.prototype.masterHtml = function() {
      var htm, i, len, month, ref;
      htm = "";
      ref = this.Data.season;
      for (i = 0, len = ref.length; i < len; i++) {
        month = ref[i];
        htm += "<div id=\"" + month + "\" class=\"" + month + "\">" + (this.roomsHtml(this.Data.year, month)) + "</div>";
      }
      return htm;
    };

    Master.prototype.roomsHtml = function(year, month) {
      var begDay, date, day, endDay, htm, i, j, k, monthIdx, ref, ref1, ref2, ref3, ref4, ref5, ref6, room, roomId, weekday, weekdayIdx;
      monthIdx = this.Data.months.indexOf(month);
      begDay = 1;
      endDay = this.Data.numDayMonth[monthIdx];
      weekdayIdx = new Date(2000 + year, monthIdx, 1).getDay();
      htm = "<div class=\"MasterTitle\">" + month + "</div>";
      htm += "<table><thead>";
      htm += "<tr><th></th>";
      for (day = i = ref = begDay, ref1 = endDay; ref <= ref1 ? i <= ref1 : i >= ref1; day = ref <= ref1 ? ++i : --i) {
        weekday = this.Data.weekdays[(weekdayIdx + day - 1) % 7].charAt(0);
        htm += "<th>" + weekday + "</th>";
      }
      htm += "</tr><tr><th></th>";
      for (day = j = ref2 = begDay, ref3 = endDay; ref2 <= ref3 ? j <= ref3 : j >= ref3; day = ref2 <= ref3 ? ++j : --j) {
        htm += "<th>" + day + "</th>";
      }
      htm += "</tr></thead><tbody>";
      ref4 = this.rooms;
      for (roomId in ref4) {
        if (!hasProp.call(ref4, roomId)) continue;
        room = ref4[roomId];
        htm += "<tr id=\"" + roomId + "\"><td>" + roomId + "</td>";
        for (day = k = ref5 = begDay, ref6 = endDay; ref5 <= ref6 ? k <= ref6 : k >= ref6; day = ref5 <= ref6 ? ++k : --k) {
          date = this.Data.toDateStr(day, monthIdx);
          htm += this.createMasterCell(roomId, room, date);
        }
        htm += "</tr>";
      }
      htm += "</tbody></table>";
      return htm;
    };

    Master.prototype.seasonHtml = function() {
      var htm, i, len, month, ref;
      htm = "";
      ref = this.Data.season;
      for (i = 0, len = ref.length; i < len; i++) {
        month = ref[i];
        htm += "<div id=\"" + month + "\" class=\"" + month + "C\">" + (this.monthTable(month)) + "</div>";
      }
      return htm;
    };

    Master.prototype.monthTable = function(month) {
      var begDay, col, day, endDay, htm, i, j, k, monthIdx, row, weekday;
      monthIdx = this.Data.months.indexOf(month);
      begDay = new Date(2000 + this.res.year, monthIdx, 1).getDay() - 1;
      endDay = this.Data.numDayMonth[monthIdx];
      htm = "<div class=\"SeasonTitle\">" + month + "</div>";
      htm += "<table class=\"MonthTable\"><thead><tr>";
      for (day = i = 0; i < 7; day = ++i) {
        weekday = this.Data.weekdays[day];
        htm += "<th>" + weekday + "</th>";
      }
      htm += "</tr></thead><tbody>";
      for (row = j = 0; j < 6; row = ++j) {
        htm += "<tr>";
        for (col = k = 0; k < 7; col = ++k) {
          day = this.monthDay(begDay, endDay, row, col);
          htm += day !== "" ? "<td>" + (this.roomDay(monthIdx, day)) + "</td>" : "<td></td>";
        }
        htm += "</tr>";
      }
      return htm += "</tbody></table>";
    };

    Master.prototype.roomDay = function(monthIdx, day) {
      var col, date, htm, i, roomId, status;
      htm = "";
      htm += "<div class=\"MonthDay\">" + day + "</div>";
      htm += "<div class=\"MonthRoom\">";
      for (col = i = 1; i <= 10; col = ++i) {
        roomId = col;
        if (roomId === 9) {
          roomId = 'N';
        }
        if (roomId === 10) {
          roomId = 'S';
        }
        date = this.Data.toDateStr(day, monthIdx);
        status = this.res.dayBooked(roomId, date);
        if (status !== 'free') {
          htm += "<span id=\"" + (this.roomDayId(monthIdx, day, roomId)) + "\" class=\"own-" + status + "\">" + roomId + " data-res=\"y\"</span>";
        }
      }
      htm += "</div>";
      return htm;
    };

    Master.prototype.roomDayId = function(monthIdx, day, roomId) {
      var date;
      date = this.Data.dateStr(day, monthIdx);
      return this.cellId('S', roomId, date);
    };

    Master.prototype.monthDay = function(begDay, endDay, row, col) {
      var day;
      day = row * 7 + col - begDay;
      day = 1 <= day && day <= endDay ? day : "";
      return day;
    };

    Master.prototype.dailysHtml = function() {
      var htm;
      htm = "";
      htm += "<h1 class=\"DailysH1\">Daily Activities</h1>";
      htm += "<h2 class=\"DailysH2\">Arrivals</h2>";
      htm += "<h2 class=\"DailysH2\">Departures</h2>";
      return htm;
    };

    return Master;

  })();

}).call(this);
