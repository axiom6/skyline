// Generated by CoffeeScript 1.12.2
(function() {
  var Alloc,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Alloc = (function() {
    module.exports = Alloc;

    Alloc.Allocs = require('data/Alloc.json');

    function Alloc(stream, store, room, cust, master, book) {
      this.stream = stream;
      this.store = store;
      this.room = room;
      this.cust = cust;
      this.master = master;
      this.book = book != null ? book : null;
      this.onAlloc = bind(this.onAlloc, this);
      this.subscribe();
      this.rooms = this.room.rooms;
      this.init();
    }

    Alloc.prototype.init = function() {
      return this.store.make('Alloc');
    };

    Alloc.prototype.subscribe = function() {
      this.store.subscribe('Alloc', 'none', 'make', (function(_this) {
        return function(make) {
          return Util.log('Alloc.make()', make);
        };
      })(this));
      this.store.subscribe('Alloc', 'none', 'onAdd', (function(_this) {
        return function(onAdd) {
          return _this.onAlloc(onAdd);
        };
      })(this));
      this.store.subscribe('Alloc', 'none', 'onPut', (function(_this) {
        return function(onPut) {
          return Util.log('Alloc.onPut()', onPut);
        };
      })(this));
      this.store.subscribe('Alloc', 'none', 'onDel', (function(_this) {
        return function(onDel) {
          return Util.log('Alloc.onDel()', onDel);
        };
      })(this));
      this.store.make('Alloc');
      this.store.on('Alloc', 'onAdd');
      this.store.on('Alloc', 'onPut');
      return this.store.on('Alloc', 'onDel');
    };

    Alloc.prototype.onAlloc = function(onAdd) {
      var alloc, roomId;
      alloc = onAdd.val;
      roomId = onAdd.key;
      this.room.onAlloc(alloc, roomId);
      this.master.onAlloc(alloc, roomId);
      if (this.book != null) {
        this.book.onAlloc(alloc, roomId);
      }
    };

    return Alloc;

  })();

}).call(this);
