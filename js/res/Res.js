// Generated by CoffeeScript 1.12.2
(function() {
  var Res,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Res = (function() {
    module.exports = Res;

    Res.Resvs = require('data/res.json');

    function Res(stream, store, room1, Data) {
      this.stream = stream;
      this.store = store;
      this.room = room1;
      this.Data = Data;
      this.subscribeToResKey = bind(this.subscribeToResKey, this);
      this.testResvs = Res.Resvs;
      if (this.Data.testing) {
        this.insertTestResvs();
      }
    }

    Res.prototype.subscribeToResKey = function(resKey) {
      this.store.subscribe('Res', resKey, 'add', (function(_this) {
        return function(add) {
          return Util.log('Res.subscribeToResKey', resKey, add);
        };
      })(this));
      return this.store.subscribe('Res', resKey, 'put', (function(_this) {
        return function(put) {
          return Util.log('Res.subscribeToResKey', resKey, put);
        };
      })(this));
    };

    Res.prototype.insertTestResvs = function() {
      this.store.subscribe('Res', 'none', 'make', (function(_this) {
        return function(make) {
          _this.store.insert('Res', _this.testResvs);
          return Util.noop(make);
        };
      })(this));
      this.store.make('Res');
      this.updateRooms(this.testResvs);
    };

    Res.prototype.updateRooms = function(resvs) {
      var dayId, res, resDay, resKey, resRoom, results, room, roomDay, roomId;
      results = [];
      for (resKey in resvs) {
        if (!hasProp.call(resvs, resKey)) continue;
        res = resvs[resKey];
        results.push((function() {
          var ref, results1;
          ref = res.rooms;
          results1 = [];
          for (roomId in ref) {
            if (!hasProp.call(ref, roomId)) continue;
            resRoom = ref[roomId];
            room = this.room.rooms[roomId];
            results1.push((function() {
              var ref1, results2;
              ref1 = resRoom.days;
              results2 = [];
              for (dayId in ref1) {
                if (!hasProp.call(ref1, dayId)) continue;
                resDay = ref1[dayId];
                roomDay = room.days[dayId];
                roomDay = roomDay != null ? roomDay : {};
                roomDay.status = res.status;
                roomDay.resKey = resKey;
                results2.push(room.days[dayId] = roomDay);
              }
              return results2;
            })());
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Res.prototype.createRes = function(total, status, method, phone, roomUIs, payments) {
      var day, obj, ref, res, roomId, roomUI;
      res = {};
      res.key = this.genResKey(roomUIs);
      res.total = total;
      res.paid = 0;
      res.balance = 0;
      res.status = status;
      res.method = method;
      res.booked = '20170516';
      res.arrive = "99999999";
      res.custKey = this.Data.genCustKey(phone);
      res.rooms = {};
      for (roomId in roomUIs) {
        if (!hasProp.call(roomUIs, roomId)) continue;
        roomUI = roomUIs[roomId];
        if (!(roomUI.numDays > 0)) {
          continue;
        }
        res.rooms[roomId] = roomUI.resRoom;
        ref = roomUI.resRoom.days;
        for (day in ref) {
          if (!hasProp.call(ref, day)) continue;
          obj = ref[day];
          if (day < res.arrive) {
            res.arrive = day;
          }
        }
      }
      res.payments = payments;
      this.subscribeToResKey(res.key);
      return res;
    };

    Res.prototype.genResKey = function(roomUIs) {
      var days, resKey, roomId, roomUI;
      resKey = "";
      for (roomId in roomUIs) {
        if (!hasProp.call(roomUIs, roomId)) continue;
        roomUI = roomUIs[roomId];
        if (!(roomUI.numDays > 0)) {
          continue;
        }
        days = Object.keys(roomUI.resRoom.days).sort();
        resKey = this.Data.genResKey(roomId, days[0]);
        break;
      }
      if (!Util.isStr(resKey)) {
        Util.error('Res.genResKey() resKey blank');
      }
      return resKey;
    };

    Res.prototype.add = function(id, res) {
      return this.store.add('Res', id, res);
    };

    Res.prototype.put = function(id, res) {
      return this.store.put('Res', id, res);
    };

    Res.prototype.resRoom = function() {
      return {
        "total": 0,
        "price": 0,
        "guests": 2,
        "pets": 0,
        "spa": false,
        "days": {}
      };
    };

    Res.prototype.resPay = function() {
      return {
        "amount": 0,
        "date": "xxxxxxxx",
        "with": "xxxxx",
        "num": "xxxx"
      };
    };

    return Res;

  })();

}).call(this);
