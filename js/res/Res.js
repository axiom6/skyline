// Generated by CoffeeScript 1.12.2
(function() {
  var Res,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Res = (function() {
    module.exports = Res;

    Res.Resvs = require('data/res.json');

    function Res(stream, store, room1, cust) {
      this.stream = stream;
      this.store = store;
      this.room = room1;
      this.cust = cust;
      this.initRes = bind(this.initRes, this);
      this.resvs = Res.Resvs;
      this.initRes();
      this.updateRooms();
    }

    Res.prototype.initRes = function() {
      this.store.subscribe('Res', 'none', 'make', (function(_this) {
        return function(make) {
          _this.store.insert('Res', _this.resvs);
          return Util.noop(make);
        };
      })(this));
      return this.store.make('Res');
    };

    Res.prototype.updateRooms = function() {
      var dayId, ref, res, resDay, resId, resRoom, results, room, roomDay, roomId;
      ref = this.resvs;
      results = [];
      for (resId in ref) {
        if (!hasProp.call(ref, resId)) continue;
        res = ref[resId];
        results.push((function() {
          var ref1, results1;
          ref1 = res.rooms;
          results1 = [];
          for (roomId in ref1) {
            if (!hasProp.call(ref1, roomId)) continue;
            resRoom = ref1[roomId];
            room = this.room.rooms[roomId];
            results1.push((function() {
              var ref2, results2;
              ref2 = resRoom.days;
              results2 = [];
              for (dayId in ref2) {
                if (!hasProp.call(ref2, dayId)) continue;
                resDay = ref2[dayId];
                roomDay = room.days[dayId];
                roomDay = roomDay != null ? roomDay : {};
                roomDay.status = res.status;
                roomDay.resId = resId;
                results2.push(room.days[dayId] = roomDay);
              }
              return results2;
            })());
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return Res;

  })();


  /*
  onAlloc:( alloc, roomId ) =>
    room = @rooms[roomId]
    for own day, obj of alloc.days
      room.days[day] =  alloc.days[day]
    @store.put( 'Room', roomId, room )
    return
   */

}).call(this);
