// Generated by CoffeeScript 1.12.2
(function() {
  var Res,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Res = (function() {
    module.exports = Res;

    Res.Resvs = require('data/res.json');

    function Res(stream, store1, Data, room1) {
      this.stream = stream;
      this.store = store1;
      this.Data = Data;
      this.room = room1;
      this.subscribeToResId = bind(this.subscribeToResId, this);
      this.testResvs = Res.Resvs;
      if (this.Data.testing) {
        this.insertTestResvs();
      }
    }

    Res.prototype.subscribeToResId = function(resId) {
      this.store.subscribe('Res', resId, 'add', (function(_this) {
        return function(add) {
          return Util.log('Res.subscribeToResId', resId, add);
        };
      })(this));
      return this.store.subscribe('Res', resId, 'put', (function(_this) {
        return function(put) {
          return Util.log('Res.subscribeToResId', resId, put);
        };
      })(this));
    };

    Res.prototype.insertTestResvs = function() {
      this.store.subscribe('Res', 'none', 'make', (function(_this) {
        return function(make) {
          _this.store.insert('Res', _this.testResvs);
          return Util.noop(make);
        };
      })(this));
      this.store.make('Res');
      this.updateRooms(this.testResvs);
    };

    Res.prototype.makeAllTables = function() {
      this.store.make('Res');
      this.store.make('Room');
      this.store.make('Payment');
      return this.store.make('Cust');
    };

    Res.prototype.updateRooms = function(resvs) {
      var dayId, res, resDay, resId, resRoom, results, room, roomDay, roomId;
      results = [];
      for (resId in resvs) {
        if (!hasProp.call(resvs, resId)) continue;
        res = resvs[resId];
        results.push((function() {
          var ref, ref1, results1;
          ref = res.rooms;
          results1 = [];
          for (roomId in ref) {
            if (!hasProp.call(ref, roomId)) continue;
            resRoom = ref[roomId];
            room = this.room.rooms[roomId];
            ref1 = resRoom.days;
            for (dayId in ref1) {
              if (!hasProp.call(ref1, dayId)) continue;
              resDay = ref1[dayId];
              roomDay = room.days[dayId];
              roomDay = roomDay != null ? roomDay : {};
              roomDay.status = res.status;
              roomDay.resId = resId;
              room.days[dayId] = roomDay;
            }
            results1.push(this.allocRoom(roomId, room.days));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Res.prototype.allocRoom = function(roomId, days) {
      return store.add('Alloc', roomId, {
        days: days
      });
    };

    Res.prototype.createRoomRes = function(total, status, method, roomUIs) {
      var day, obj, ref, res, roomId, roomUI;
      res = {};
      res.resId = this.Data.genResId(roomUIs);
      res.total = total;
      res.paid = 0;
      res.balance = 0;
      res.status = status;
      res.method = method;
      res.booked = this.Data.today();
      res.arrive = res.resId.substr(1, 8);
      res.rooms = {};
      for (roomId in roomUIs) {
        if (!hasProp.call(roomUIs, roomId)) continue;
        roomUI = roomUIs[roomId];
        if (!(roomUI.numDays > 0)) {
          continue;
        }
        res.rooms[roomId] = roomUI.resRoom;
        ref = roomUI.resRoom.days;
        for (day in ref) {
          if (!hasProp.call(ref, day)) continue;
          obj = ref[day];
          if (day.status === 'mine') {
            day.status = status;
          }
          if (day < res.arrive) {
            res.arrive = day;
          }
        }
      }
      res.payments = {};
      res.cust = {};
      return res;
    };

    Res.prototype.createCust = function(first, last, phone, email, source) {
      var cust;
      cust = {};
      cust.custId = this.Data.genCustId(phone);
      cust.first = first;
      cust.last = last;
      cust.phone = phone;
      cust.email = email;
      cust.source = source;
      return cust;
    };

    Res.prototype.postRes = function(id, res) {
      this.updateRooms(res);
      this.store.add('Res', id, res);
      return Util.log('Res.postRes()', res);
    };

    return Res;

  })();

}).call(this);
