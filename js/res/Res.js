// Generated by CoffeeScript 1.12.2
(function() {
  var Res,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Res = (function() {
    module.exports = Res;

    Res.Resvs = require('data/res.json');

    function Res(stream, store, Data, room1) {
      this.stream = stream;
      this.store = store;
      this.Data = Data;
      this.room = room1;
      this.subscribeToResId = bind(this.subscribeToResId, this);
      this.testResvs = Res.Resvs;
      if (this.Data.testing) {
        this.insertTestResvs();
      }
    }

    Res.prototype.createRoomResv = function(status, method, roomUIs) {
      var day, obj, ref, resv, roomId, roomUI;
      resv = {};
      resv.resId = this.Data.genResId(roomUIs);
      resv.totals = 0;
      resv.paid = 0;
      resv.balance = 0;
      resv.status = status;
      resv.method = method;
      resv.booked = this.Data.today();
      resv.arrive = resv.resId.substr(1, 8);
      resv.rooms = {};
      for (roomId in roomUIs) {
        if (!hasProp.call(roomUIs, roomId)) continue;
        roomUI = roomUIs[roomId];
        if (!(!Util.isObjEmpty(roomUI.days))) {
          continue;
        }
        resv.rooms[roomId] = this.toResvRoom(roomUI);
        ref = roomUI.days;
        for (day in ref) {
          if (!hasProp.call(ref, day)) continue;
          obj = ref[day];
          if (day.status === 'mine') {
            day.status = status;
          }
          if (day < resv.arrive) {
            resv.arrive = day;
          }
        }
      }
      resv.payments = {};
      resv.cust = {};
      return resv;
    };

    Res.prototype.toResvRoom = function(roomUI) {
      var room;
      room = {};
      room.name = roomUI.name;
      room.total = roomUI.total;
      room.price = roomUI.price;
      room.guests = roomUI.guests;
      room.pets = roomUI.pets;
      room.spa = roomUI.spa;
      room.change = roomUI.change;
      room.reason = roomUI.reason;
      room.days = roomUI.days;
      room.nights = Util.keys(roomUI.days).length;
      return room;
    };

    Res.prototype.updateRooms = function(resv) {
      var day, dayId, ref, ref1, results, room, roomId;
      ref = resv.rooms;
      results = [];
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        room = ref[roomId];
        ref1 = room.days;
        for (dayId in ref1) {
          if (!hasProp.call(ref1, dayId)) continue;
          day = ref1[dayId];
          day.status = resv.status;
          day.resId = resv.resId;
        }
        delete room.group;
        results.push(this.allocRoom(roomId, room.days));
      }
      return results;
    };

    Res.prototype.allocRoom = function(roomId, days) {
      return this.store.add('Alloc', roomId, {
        days: days
      });
    };

    Res.prototype.subscribeToResId = function(resId) {
      this.store.subscribe('Res', resId, 'add', (function(_this) {
        return function(add) {
          return Util.log('Res.subscribeToResId', resId, add);
        };
      })(this));
      return this.store.subscribe('Res', resId, 'put', (function(_this) {
        return function(put) {
          return Util.log('Res.subscribeToResId', resId, put);
        };
      })(this));
    };

    Res.prototype.insertTestResvs = function() {
      var ref, resId, resv;
      this.store.subscribe('Res', 'none', 'make', (function(_this) {
        return function(make) {
          _this.store.insert('Res', _this.testResvs);
          return Util.noop(make);
        };
      })(this));
      this.store.make('Res');
      ref = this.testResvs;
      for (resId in ref) {
        if (!hasProp.call(ref, resId)) continue;
        resv = ref[resId];
        this.updateRooms(resv);
      }
    };

    Res.prototype.makeAllTables = function() {
      this.store.make('Res');
      this.store.make('Room');
      this.store.make('Payment');
      return this.store.make('Cust');
    };

    Res.prototype.createCust = function(first, last, phone, email, source) {
      var cust;
      cust = {};
      cust.custId = this.Data.genCustId(phone);
      cust.first = first;
      cust.last = last;
      cust.phone = phone;
      cust.email = email;
      cust.source = source;
      return cust;
    };

    Res.prototype.createPayment = function(amount, method, last4, purpose) {
      var payment;
      payment = {};
      payment.amount = amount;
      payment.date = this.Data.today();
      payment.method = method;
      payment["with"] = last4;
      payment.purpose = purpose;
      payment.cc = '';
      payment.exp = '';
      payment.cvc = '';
      return payment;
    };

    Res.prototype.setResvStatus = function(resv, post, purpose) {
      if (post === 'post') {
        if (purpose === 'PayInFull' || purpose === 'PayOffDeposit') {
          resv.status = 'book';
        }
        if (purpose === 'Deposit') {
          resv.status = 'depo';
        }
      } else if (post === 'deny') {
        resv.status = 'free';
      }
      if (!Util.inArray(['book', 'depo', 'free'], resv.status)) {
        Util.error('Pay.setResStatus() unknown status ', resv.status);
        resv.status = 'free';
      }
    };

    Res.prototype.postResv = function(resv, post, totals, amount, method, last4, purpose) {
      var payId;
      this.setResvStatus(resv, post, purpose);
      payId = this.Data.genPaymentId(resv.resId, resv.payments);
      resv.payments[payId] = this.createPayment(amount, method, last4, purpose);
      resv.totals = totals;
      resv.paid += amount;
      resv.balance = totals - resv.paid;
      this.updateRooms(resv);
      if (status === 'post') {
        this.store.add('Res', resv.resId, resv);
      }
      return Util.log('Res.postResv()', resv);
    };

    return Res;

  })();

}).call(this);
