// Generated by CoffeeScript 1.12.2
(function() {
  var Res,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Res = (function() {
    module.exports = Res;

    Res.Rooms = require('data/room.json');

    Res.Resvs = {};

    Res.Days = {};

    Res.States = ["free", "mine", "depo", "book", "prep", "chan"];

    function Res(stream, store, Data, appName) {
      this.stream = stream;
      this.store = store;
      this.Data = Data;
      this.appName = appName;
      this.insertRooms = bind(this.insertRooms, this);
      this.onDays = bind(this.onDays, this);
      this.onResv = bind(this.onResv, this);
      this.onResId = bind(this.onResId, this);
      this.rooms = Res.Rooms;
      this.roomKeys = Util.keys(this.rooms);
      this.states = Res.States;
      this.book = null;
      this.master = null;
      this.days = {};
      this.resvs = {};
      if (this.appName === 'Guest') {
        this.dateRange(this.Data.beg, this.Data.end);
      }
      if (this.store.justMemory) {
        this.populateMemory();
      }
    }

    Res.prototype.populateMemory = function() {
      this.onResv('add', (function(_this) {
        return function(resv) {
          return Util.noop('onResv', resv);
        };
      })(this));
      if (this.store.justMemory) {
        this.onDays('put', (function(_this) {
          return function(days) {
            return Util.noop('onDays', days);
          };
        })(this));
      }
      return this.insertNewTables();
    };

    Res.prototype.dateRange = function(beg, end, onComplete) {
      if (onComplete == null) {
        onComplete = null;
      }
      this.store.subscribe('Days', 'range', 'none', (function(_this) {
        return function(days) {
          _this.days = days;
          if (onComplete != null) {
            return onComplete();
          }
        };
      })(this));
      this.store.range('Days', beg, end);
    };

    Res.prototype.insertNewTables = function() {
      this.insertRooms(Res.Rooms);
      this.insertResvs(Res.Resvs);
      return this.insertDays(Res.Resvs);
    };

    Res.prototype.getStatus = function(roomId, date) {
      var day, entry;
      day = this.days != null ? this.days[date] : void 0;
      entry = (day != null) && (day[roomId] != null) ? day[roomId] : null;
      if (entry != null) {
        return entry.status;
      } else {
        return 'free';
      }
    };

    Res.prototype.resId = function(roomId, date) {
      var day, entry;
      day = this.days != null ? this.days[date] : void 0;
      entry = (day != null) && (day[roomId] != null) ? day[roomId] : null;
      if (entry != null) {
        return entry.resId;
      } else {
        return 'none';
      }
    };

    Res.prototype.roomUI = function(rooms) {
      var key, room;
      for (key in rooms) {
        if (!hasProp.call(rooms, key)) continue;
        room = rooms[key];
        room.$ = {};
        room = this.populateRoom(room, {}, 0, 0, 2, 0);
      }
    };

    Res.prototype.populateRoom = function(room, days, total, price, guests, pets) {
      room.days = days;
      room.total = total;
      room.price = price;
      room.guests = guests;
      room.pets = pets;
      room.change = 0;
      room.reason = 'No Changes';
      return room;
    };

    Res.prototype.optSpa = function(roomId) {
      return this.rooms[roomId].spa === 'O';
    };

    Res.prototype.hasSpa = function(roomId) {
      return this.rooms[roomId].spa === 'O' || this.rooms[roomId].spa === 'Y';
    };

    Res.prototype.createRoomResv = function(status, method, totals, cust, rooms) {
      var day, obj, ref, resv, room, roomId;
      resv = {};
      resv.resId = this.Data.genResId(rooms);
      resv.totals = totals;
      resv.paid = 0;
      resv.balance = 0;
      resv.status = status;
      resv.method = method;
      resv.booked = this.Data.today();
      resv.arrive = resv.resId.substr(0, 6);
      resv.rooms = {};
      for (roomId in rooms) {
        if (!hasProp.call(rooms, roomId)) continue;
        room = rooms[roomId];
        if (!(!Util.isObjEmpty(room.days))) {
          continue;
        }
        delete room.$;
        room.nights = Util.keys(room.days).length;
        resv.rooms[roomId] = room;
        ref = room.days;
        for (day in ref) {
          if (!hasProp.call(ref, day)) continue;
          obj = ref[day];
          if (day.status === 'mine') {
            day.status = status;
          }
          if (day < resv.arrive) {
            resv.arrive = day;
          }
        }
      }
      resv.payments = {};
      resv.cust = cust;
      return resv;
    };

    Res.prototype.allocRooms = function(resv) {
      var day, dayId, ref, ref1, results, room, roomId;
      ref = resv.rooms;
      results = [];
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        room = ref[roomId];
        ref1 = room.days;
        for (dayId in ref1) {
          if (!hasProp.call(ref1, dayId)) continue;
          day = ref1[dayId];
          this.setDayRoom(day, resv.status, resv.resId);
        }
        delete room.group;
        results.push(this.allocRoom(roomId, room.days));
      }
      return results;
    };

    Res.prototype.allocRoom = function(roomId, days) {
      if (this.book != null) {
        this.book.onAlloc(roomId, days);
      }
      if (this.master != null) {
        return this.master.onAlloc(roomId, days);
      }
    };

    Res.prototype.onResId = function(op, doResv, resId) {
      return this.store.on('Res', op, resId, (function(_this) {
        return function(resv) {
          return doResv(resv);
        };
      })(this));
    };

    Res.prototype.onResv = function(op, doResv) {
      return this.store.on('Res', op, 'none', (function(_this) {
        return function(resv) {
          return doResv(resv);
        };
      })(this));
    };

    Res.prototype.onDays = function(op, doDay) {
      return this.store.on('Days', op, 'none', (function(_this) {
        return function(day) {
          return doDay(day);
        };
      })(this));
    };

    Res.prototype.dayResvs = function(today) {
      var date, day, ref, resvs;
      resvs = {};
      ref = this.days;
      for (date in ref) {
        if (!hasProp.call(ref, date)) continue;
        day = ref[date];
        if (date === today) {
          resvs[day.resId] = this.resvs[day.resId];
        }
      }
      return resvs;
    };

    Res.prototype.insertRooms = function(rooms) {
      this.store.subscribe('Room', 'make', 'none', (function(_this) {
        return function(make) {
          _this.store.insert('Room', rooms);
          return Util.noop(make);
        };
      })(this));
      this.store.make('Room');
    };

    Res.prototype.insertResvs = function(resvs) {
      var resId, resv;
      for (resId in resvs) {
        if (!hasProp.call(resvs, resId)) continue;
        resv = resvs[resId];
        this.allocRooms(resv);
      }
      this.store.subscribe('Res', 'make', 'none', (function(_this) {
        return function() {
          return _this.store.insert('Res', resvs);
        };
      })(this));
      this.store.make('Res');
    };

    Res.prototype.insertDays = function(resvs) {
      var day, dayId, ref;
      this.days = this.createDaysFromResvs(resvs, {});
      ref = this.days;
      for (dayId in ref) {
        if (!hasProp.call(ref, dayId)) continue;
        day = ref[dayId];
        this.store.add('Days', dayId, day);
      }
    };

    Res.prototype.createDaysFromResvs = function(resvs, days) {
      var resv, resvId;
      for (resvId in resvs) {
        if (!hasProp.call(resvs, resvId)) continue;
        resv = resvs[resvId];
        days = this.createDaysFromResv(resv, days);
      }
      return days;
    };

    Res.prototype.createDaysFromResv = function(resv, days) {
      var dayId, dayRoom, rday, ref, ref1, room, roomId;
      ref = resv.rooms;
      for (roomId in ref) {
        if (!hasProp.call(ref, roomId)) continue;
        room = ref[roomId];
        ref1 = room.days;
        for (dayId in ref1) {
          if (!hasProp.call(ref1, dayId)) continue;
          rday = ref1[dayId];
          dayRoom = this.createDayRoom(days, dayId, roomId);
          this.setDayRoom(dayRoom, rday.status, rday.resId);
        }
      }
      return days;
    };

    Res.prototype.createDayRoom = function(days, dayId, roomIdA) {
      var roomId;
      roomId = roomIdA.toString();
      if (days[dayId] == null) {
        days[dayId] = {};
      }
      days[dayId][roomId] = {};
      return days[dayId][roomId];
    };

    Res.prototype.createCust = function(first, last, phone, email, source) {
      var cust;
      cust = {};
      cust.custId = this.Data.genCustId(phone);
      cust.first = first;
      cust.last = last;
      cust.phone = phone;
      cust.email = email;
      cust.source = source;
      return cust;
    };

    Res.prototype.createPayment = function(amount, method, last4, purpose) {
      var payment;
      payment = {};
      payment.amount = amount;
      payment.date = this.Data.today();
      payment.method = method;
      payment["with"] = method;
      payment.last4 = last4;
      payment.purpose = purpose;
      payment.cc = '';
      payment.exp = '';
      payment.cvc = '';
      return payment;
    };

    Res.prototype.setResvStatus = function(resv, post, purpose) {
      if (post === 'post') {
        if (purpose === 'PayInFull' || purpose === 'Complete') {
          resv.status = 'book';
        }
        if (purpose === 'Deposit') {
          resv.status = 'depo';
        }
      } else if (post === 'deny') {
        resv.status = 'free';
      }
      if (!Util.inArray(['book', 'depo', 'free'], resv.status)) {
        Util.error('Pay.setResStatus() unknown status ', resv.status);
        resv.status = 'free';
      }
      return resv.status;
    };

    Res.prototype.postResvChan = function(resv) {
      this.allocRooms(resv);
      return this.store.add('Res', resv.resId, resv);
    };

    Res.prototype.postResv = function(resv, post, amount, method, last4, purpose) {
      var payId, status;
      status = this.setResvStatus(resv, post, purpose);
      if (status === 'book' || status === 'depo') {
        payId = this.Data.genPaymentId(resv.resId, resv.payments);
        resv.payments[payId] = this.createPayment(amount, method, last4, purpose);
        resv.paid += amount;
        resv.balance = resv.totals - resv.paid;
        this.allocRooms(resv);
        this.store.add('Res', resv.resId, resv);
        return this.days = this.mergePostDays(resv, this.days);
      }
    };

    Res.prototype.mergePostDays = function(resv, allDays) {
      var dayRoom, newDay, newDayId, newDays, room, roomId;
      newDays = this.createDaysFromResv(resv, {});
      for (newDayId in newDays) {
        if (!hasProp.call(newDays, newDayId)) continue;
        newDay = newDays[newDayId];
        for (roomId in newDay) {
          if (!hasProp.call(newDay, roomId)) continue;
          room = newDay[roomId];
          dayRoom = this.createDayRoom(allDays, newDayId, roomId);
          this.setDayRoom(dayRoom, room.status, room.resId);
          this.store.put('Days', newDayId + '/' + roomId, dayRoom);
        }
      }
      return allDays;
    };

    Res.prototype.createRoomDays = function(arrive, nights, status, resId) {
      var dayId, days, i, j, ref;
      days = {};
      for (i = j = 0, ref = nights; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        dayId = this.Data.advanceDate(arrive, i);
        days[dayId] = {};
        this.setDayRoom(days[dayId], status, resId);
      }
      return days;
    };

    Res.prototype.setDayRoom = function(dayRoom, status, resId) {
      dayRoom.status = status;
      return dayRoom.resId = resId;
    };

    return Res;

  })();

}).call(this);
