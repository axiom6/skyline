// Generated by CoffeeScript 1.12.2
(function() {
  var $, Data, StripeCC, stripeNode,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('jquery');

  Data = require('js/res/Data');

  stripeNode = require("stripe")(Data.stripeTestKey);

  StripeCC = (function() {
    module.exports = StripeCC;

    function StripeCC(stream, store, room, cust, res) {
      this.stream = stream;
      this.store = store;
      this.room = room;
      this.cust = cust;
      this.res = res;
      this.doAction = bind(this.doAction, this);
      this.onCharge = bind(this.onCharge, this);
      this.doCharge = bind(this.doCharge, this);
      this.tokenHandler = bind(this.tokenHandler, this);
      this.onFormSubmit = bind(this.onFormSubmit, this);
      this.onCardError = bind(this.onCardError, this);
      this.stripeClient = Stripe(Data.stripeTestPub);
      this.elements = this.stripeClient.elements();
      this.token = "";
      this.totals = 800;
      this.desc = "First Run";
    }

    StripeCC.prototype.ready = function() {
      $("#StripeCC").append(this.checkOutForm());
    };

    StripeCC.prototype.readyElements = function() {
      $("#StripeCC").append(this.elementsForm());
      this.card = this.elements.create('card', {
        style: this.elementsStyle()
      });
      this.card.mount('#card-element');
      this.form = document.getElementById('payment-form');
      this.card.addEventListener('change', (function(_this) {
        return function(event) {
          return _this.onCardError(event);
        };
      })(this));
      this.form.addEventListener('submit', (function(_this) {
        return function(event) {
          return _this.onFormSubmit(event);
        };
      })(this));
    };

    StripeCC.prototype.elementsForm = function() {
      return "<form action=\"index.html#Confirm\" method=\"post\" id=\"payment-form\">\n  <div class=\"form-row\">\n    <label for=\"card-element\">Credit or debit card</label>\n    <div id=\"card-element\"></div>\n    <div id=\"card-errors\"></div>\n  </div>\n  <button>Submit Payment</button>\n</form>";
    };

    StripeCC.prototype.checkOutForm = function() {
      return "<form action=Javascript:" + (this.doAction()) + "\" method=\"POST\">\n    <script\n    src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\n    data-key=\"pk_test_VmF7xSInW8JHrcUga6yRmjqq\"\n    data-amount=\"999\"\n    data-name=\"SkylineSue\"\n    data-description=\"Widget\"\n    data-image=\"https://stripe.com/img/documentation/checkout/marketplace.png\"\n    data-locale=\"auto\">\n    </script>\n</form>";
    };

    StripeCC.prototype.elementsStyle = function() {
      return {
        base: {
          fontSize: '16px',
          lineHeight: '24px'
        }
      };
    };

    StripeCC.prototype.onCardError = function(event) {
      var displayError;
      displayError = document.getElementById('card-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
    };

    StripeCC.prototype.onFormSubmit = function(event) {
      event.preventDefault();
      this.stripeClient.createToken(this.card).then((function(_this) {
        return function(result) {
          var errorElement;
          if (result.error) {
            errorElement = document.getElementById('card-errors');
            return errorElement.textContent = result.error.message;
          } else {
            _this.token = result.token;
            return _this.tokenHandler(result.token);
          }
        };
      })(this));
    };

    StripeCC.prototype.tokenHandler = function(token) {
      var hiddenInput;
      hiddenInput = document.createElement('input');
      hiddenInput.setAttribute('type', 'hidden');
      hiddenInput.setAttribute('name', 'stripeToken');
      hiddenInput.setAttribute('value', token.id);
      this.form.appendChild(hiddenInput);
      this.form.submit();
    };

    StripeCC.prototype.doCharge = function() {
      stripeNode.charges.create({
        amount: this.totals,
        currency: "usd",
        description: this.desc,
        source: this.token
      }, this.onCharge);
    };

    StripeCC.prototype.onCharge = function(error, charge) {
      if (error) {
        Util.error("StripeCC.onCharge", error);
      } else {
        Util.log("StripeCC.onCharge", charge);
      }
    };

    StripeCC.prototype.doAction = function() {
      Util.log("StripeCC.doAction", 'called too soon');
    };

    return StripeCC;

  })();

}).call(this);
