// Generated by CoffeeScript 1.12.2
(function() {
  var $, Data, StripeCC,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('jquery');

  Data = require('js/res/Data');

  StripeCC = (function() {
    module.exports = StripeCC;

    function StripeCC(stream, store, room, cust, res) {
      this.stream = stream;
      this.store = store;
      this.room = room;
      this.cust = cust;
      this.res = res;
      this.stripeTokenHandler = bind(this.stripeTokenHandler, this);
      this.onFormSubmit = bind(this.onFormSubmit, this);
      this.onCardError = bind(this.onCardError, this);
      this.stripe = Stripe(Data.stripeTestPub);
      this.elements = this.stripe.elements();
    }

    StripeCC.prototype.ready = function() {
      $("#StripeCC").append(this.elementsForm());
      this.card = this.elements.create('card', {
        style: this.elementsStyle()
      });
      this.card.mount('#card-element');
      this.form = document.getElementById('payment-form');
      this.card.addEventListener('change', (function(_this) {
        return function(event) {
          return _this.onCardError(event);
        };
      })(this));
      this.form.addEventListener('submit', (function(_this) {
        return function(event) {
          return _this.onFormSubmit(event);
        };
      })(this));
    };

    StripeCC.prototype.elementsForm = function() {
      return "<form action=\"charge.html\" method=\"post\" id=\"payment-form\">\n  <div class=\"form-row\">\n    <label for=\"card-element\">Credit or debit card</label>\n    <div id=\"card-element\"></div>\n    <div id=\"card-errors\"></div>\n  </div>\n  <button>Submit Payment</button>\n</form>";
    };

    StripeCC.prototype.elementsStyle = function() {
      return {
        base: {
          fontSize: '16px',
          lineHeight: '24px'
        }
      };
    };

    StripeCC.prototype.onCardError = function(event) {
      var displayError;
      displayError = document.getElementById('card-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
    };

    StripeCC.prototype.onFormSubmit = function(event) {
      event.preventDefault();
      return this.stripe.createToken(this.card).then((function(_this) {
        return function(result) {
          var errorElement;
          if (result.error) {
            errorElement = document.getElementById('card-errors');
            return errorElement.textContent = result.error.message;
          } else {
            return _this.stripeTokenHandler(result.token);
          }
        };
      })(this));
    };

    StripeCC.prototype.stripeTokenHandler = function(token) {
      var hiddenInput;
      hiddenInput = document.createElement('input');
      hiddenInput.setAttribute('type', 'hidden');
      hiddenInput.setAttribute('name', 'stripeToken');
      hiddenInput.setAttribute('value', token.id);
      this.form.appendChild(hiddenInput);
      return this.form.submit();
    };

    return StripeCC;

  })();

}).call(this);
